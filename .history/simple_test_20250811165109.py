#!/usr/bin/env python3
"""
Test case ƒë∆°n gi·∫£n cho ch·ª©c nƒÉng Question-Answer Mapping
"""
import os
import sys
sys.path.append('c:/app/QProcess')

from processors.question_answer_mapper import QuestionAnswerMapper
from datetime import datetime

def simple_mapping_test():
    """Test ƒë∆°n gi·∫£n: ƒë·ªçc file .md -> g·ª≠i AI -> nh·∫≠n k·∫øt qu·∫£"""
    
    print("="*60)
    print("üß™ TEST MAPPING ƒê·ªîN GI·∫¢N")
    print("="*60)
    
    # File test
    test_file = "c:/app/QProcess/data/output/testMapping.md"
    
    if not os.path.exists(test_file):
        print(f"‚ùå File test kh√¥ng t·ªìn t·∫°i: {test_file}")
        return
    
    # ƒê·ªçc file
    print(f"üìñ ƒê·ªçc file: {os.path.basename(test_file)}")
    with open(test_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    print(f"üìè ƒê·ªô d√†i: {len(content):,} k√Ω t·ª±")
    
    # Kh·ªüi t·∫°o mapper
    print(f"\nüîß Kh·ªüi t·∫°o mapper...")
    mapper = QuestionAnswerMapper()
    
    if not mapper.model:
        print("‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o mapper!")
        return
    
    # G·ª≠i cho AI
    print(f"\nü§ñ G·ª≠i n·ªôi dung cho AI...")
    start_time = datetime.now()
    
    try:
        result = mapper.process_content(content)
        
        end_time = datetime.now()
        processing_time = (end_time - start_time).total_seconds()
        
        if result:
            print(f"‚úÖ Th√†nh c√¥ng! ({processing_time:.2f}s)")
            print(f"üìè K·∫øt qu·∫£: {len(result):,} k√Ω t·ª±")
            
            # L∆∞u k·∫øt qu·∫£
            output_file = f"c:/app/QProcess/data/output/simple_test_result_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md"
            with open(output_file, 'w', encoding='utf-8') as f:
                f.write(result)
            
            print(f"üíæ ƒê√£ l∆∞u: {os.path.basename(output_file)}")
            
            # Preview
            print(f"\nüìÑ PREVIEW (300 k√Ω t·ª± ƒë·∫ßu):")
            print("-" * 40)
            print(result[:300] + "..." if len(result) > 300 else result)
            
        else:
            print(f"‚ùå Th·∫•t b·∫°i! ({processing_time:.2f}s)")
            
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        import traceback
        traceback.print_exc()
    
    print("\n" + "="*60)

if __name__ == "__main__":
    simple_mapping_test()
