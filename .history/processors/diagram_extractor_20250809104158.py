"""
Diagram Extractor - Module nh·∫≠n di·ªán v√† c·∫Øt h√¨nh v·∫Ω, b·∫£ng bi·ªÉu t·ª´ ·∫£nh
"""
import os
import cv2
import numpy as np
from pathlib import Path

class DiagramExtractor:
    """Class x·ª≠ l√Ω nh·∫≠n di·ªán v√† c·∫Øt h√¨nh v·∫Ω t·ª´ ·∫£nh"""
    
    def __init__(self, output_dir="data/images"):
        """
        Kh·ªüi t·∫°o DiagramExtractor
        Args:
            output_dir: th∆∞ m·ª•c l∆∞u ·∫£nh k·∫øt qu·∫£
        """
        self.output_dir = output_dir
        self.ensure_dir(output_dir)
    
    @staticmethod
    def ensure_dir(path):
        """T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i"""
        Path(path).mkdir(parents=True, exist_ok=True)
    
    @staticmethod
    def equalize_histogram(gray_image):
        """TƒÉng t∆∞∆°ng ph·∫£n ƒë·ªÉ n√©t ƒë·∫≠m h∆°n"""
        return cv2.equalizeHist(gray_image)
    
    @staticmethod
    def binarize_image(gray_image):
        """
        Nh·ªã ph√¢n h√≥a ·∫£nh ƒë·ªÉ ph√°t hi·ªán c√°c n√©t v·∫Ω
        Args:
            gray_image: ·∫£nh x√°m
        Returns:
            ·∫£nh nh·ªã ph√¢n v·ªõi n√©t v·∫Ω = 255, n·ªÅn = 0
        """
        # Adaptive threshold ƒë·ªÉ x·ª≠ l√Ω t·ªët v·ªõi ƒëi·ªÅu ki·ªán √°nh s√°ng kh√°c nhau
        return cv2.adaptiveThreshold(
            gray_image, 255,
            cv2.ADAPTIVE_THRESH_GAUSSIAN_C,
            cv2.THRESH_BINARY_INV,
            31, 10
        )
    
    @staticmethod
    def post_process_mask(mask):
        """
        L√†m m·ªãn mask b·∫±ng morphological operations
        Args:
            mask: ·∫£nh nh·ªã ph√¢n
        Returns:
            mask ƒë√£ ƒë∆∞·ª£c l√†m m·ªãn
        """
        # N·ªëi c√°c n√©t ƒë·ª©t b·∫±ng close operation
        kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (3, 3))
        closed = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel, iterations=1)
        
        # Lo·∫°i b·ªè noise nh·ªè b·∫±ng open operation
        kernel_open = cv2.getStructuringElement(cv2.MORPH_RECT, (2, 2))
        opened = cv2.morphologyEx(closed, cv2.MORPH_OPEN, kernel_open, iterations=1)
        
        return opened
    
    @staticmethod
    def auto_trim_image(bgr_image):
        """
        T·ª± ƒë·ªông c·∫Øt s√°t vi·ªÅn n·ªôi dung trong ·∫£nh
        Args:
            bgr_image: ·∫£nh BGR
        Returns:
            ·∫£nh ƒë√£ ƒë∆∞·ª£c c·∫Øt s√°t vi·ªÅn
        """
        gray = cv2.cvtColor(bgr_image, cv2.COLOR_BGR2GRAY)
        _, thresh = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
        
        # T√¨m v√πng kh√¥ng ph·∫£i n·ªÅn tr·∫Øng
        non_zero = cv2.findNonZero(255 - thresh)
        if non_zero is None:
            return bgr_image
            
        x, y, w, h = cv2.boundingRect(non_zero)
        return bgr_image[y:y+h, x:x+w]
    
    def extract_diagrams(
        self,
        image_path,
        target_width=1600,
        min_size=80,
        max_area_ratio=0.3,
        aspect_range=(0.2, 4.0),
        solidity_range=(0.2, 0.9),
        padding=10
    ):
        """
        Nh·∫≠n di·ªán v√† c·∫Øt c√°c h√¨nh v·∫Ω, b·∫£ng bi·ªÉu t·ª´ ·∫£nh
        
        Args:
            image_path: ƒë∆∞·ªùng d·∫´n ·∫£nh input
            target_width: chi·ªÅu r·ªông chu·∫©n h√≥a ƒë·ªÉ x·ª≠ l√Ω
            min_size: k√≠ch th∆∞·ªõc t·ªëi thi·ªÉu (pixel)
            max_area_ratio: t·ª∑ l·ªá di·ªán t√≠ch t·ªëi ƒëa so v·ªõi ·∫£nh g·ªëc
            aspect_range: kho·∫£ng t·ª∑ l·ªá khung h√¨nh h·ª£p l·ªá (width/height)
            solidity_range: kho·∫£ng ƒë·ªô ƒë·∫∑c c·ªßa contour
            padding: ƒë·ªám khi c·∫Øt
            
        Returns:
            tuple (preview_path, diagram_paths, stats)
        """
        print(f"üîç ƒêang x·ª≠ l√Ω ·∫£nh: {image_path}")
        
        # ƒê·ªçc v√† resize ·∫£nh
        original_image = cv2.imread(image_path)
        if original_image is None:
            raise FileNotFoundError(f"Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh: {image_path}")
        
        h0, w0 = original_image.shape[:2]
        scale = target_width / float(w0)
        resized_image = cv2.resize(
            original_image, 
            (target_width, int(h0 * scale)), 
            interpolation=cv2.INTER_AREA
        )
        
        print(f"üìè K√≠ch th∆∞·ªõc g·ªëc: {w0}x{h0}, ƒë√£ resize: {target_width}x{int(h0 * scale)}")
        
        # Ti·ªÅn x·ª≠ l√Ω ·∫£nh
        gray = cv2.cvtColor(resized_image, cv2.COLOR_BGR2GRAY)
        gray = self.equalize_histogram(gray)
        mask = self.binarize_image(gray)
        mask = self.post_process_mask(mask)
        
        # T√¨m contours
        contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        
        print(f"üîé T√¨m th·∫•y {len(contours)} contours")
        
        # Ph√¢n t√≠ch v√† l·ªçc contours
        H, W = mask.shape
        valid_boxes = []
        valid_crops = []
        stats = {
            'total_contours': len(contours),
            'filtered_by_size': 0,
            'filtered_by_area': 0, 
            'filtered_by_aspect': 0,
            'filtered_by_solidity': 0,
            'valid_diagrams': 0
        }
        
        for contour in contours:
            x, y, w, h = cv2.boundingRect(contour)
            area = w * h
            contour_area = cv2.contourArea(contour)
            
            # L·ªçc theo k√≠ch th∆∞·ªõc t·ªëi thi·ªÉu
            if w < min_size or h < min_size:
                stats['filtered_by_size'] += 1
                continue
            
            # L·ªçc theo di·ªán t√≠ch t·ªëi ƒëa (lo·∫°i b·ªè v√πng text l·ªõn)
            if area > max_area_ratio * H * W:
                stats['filtered_by_area'] += 1
                continue
            
            # L·ªçc theo t·ª∑ l·ªá khung h√¨nh
            aspect_ratio = w / float(h)
            if not (aspect_range[0] <= aspect_ratio <= aspect_range[1]):
                stats['filtered_by_aspect'] += 1
                continue
            
            # L·ªçc theo ƒë·ªô ƒë·∫∑c (solidity)
            solidity = contour_area / float(area + 1e-6)
            if not (solidity_range[0] <= solidity <= solidity_range[1]):
                stats['filtered_by_solidity'] += 1
                continue
            
            # C·∫Øt v√πng v·ªõi padding
            x_start = max(0, x - padding)
            y_start = max(0, y - padding)
            x_end = min(W, x + w + padding)
            y_end = min(H, y + h + padding)
            
            crop = resized_image[y_start:y_end, x_start:x_end]
            crop = self.auto_trim_image(crop)
            
            # Ki·ªÉm tra k√≠ch th∆∞·ªõc sau khi trim
            if crop.shape[0] < min_size or crop.shape[1] < min_size:
                continue
            
            valid_boxes.append({
                'x': x_start, 'y': y_start, 
                'width': x_end - x_start, 'height': y_end - y_start,
                'area': area, 'aspect_ratio': aspect_ratio, 'solidity': solidity
            })
            valid_crops.append(crop)
            stats['valid_diagrams'] += 1
        
        print(f"‚úÖ T√¨m th·∫•y {stats['valid_diagrams']} h√¨nh v·∫Ω h·ª£p l·ªá")
        
        # S·∫Øp x·∫øp theo v·ªã tr√≠ t·ª´ tr√™n xu·ªëng d∆∞·ªõi, tr√°i sang ph·∫£i
        if valid_boxes:
            # S·∫Øp x·∫øp theo y tr∆∞·ªõc, sau ƒë√≥ theo x
            sorted_indices = sorted(
                range(len(valid_boxes)), 
                key=lambda i: (valid_boxes[i]['y'], valid_boxes[i]['x'])
            )
        else:
            sorted_indices = []
        
        # T·∫°o preview v·ªõi c√°c bounding boxes
        preview_image = resized_image.copy()
        for i, idx in enumerate(sorted_indices):
            box = valid_boxes[idx]
            # V·∫Ω rectangle v·ªõi m√†u kh√°c nhau
            color = [(0, 255, 0), (255, 0, 0), (0, 0, 255), (255, 255, 0), (255, 0, 255)][i % 5]
            cv2.rectangle(
                preview_image,
                (box['x'], box['y']),
                (box['x'] + box['width'], box['y'] + box['height']),
                color, 2
            )
            # Th√™m s·ªë th·ª© t·ª±
            cv2.putText(
                preview_image, str(i + 1),
                (box['x'] + 5, box['y'] + 25),
                cv2.FONT_HERSHEY_SIMPLEX, 0.8, color, 2
            )
        
        # L∆∞u preview
        base_name = Path(image_path).stem
        preview_path = os.path.join(self.output_dir, f"{base_name}_preview.png")
        cv2.imwrite(preview_path, preview_image)
        print(f"üíæ ƒê√£ l∆∞u preview: {preview_path}")
        
        # L∆∞u c√°c diagram ƒë√£ c·∫Øt
        diagram_paths = []
        for i, idx in enumerate(sorted_indices, 1):
            diagram_path = os.path.join(self.output_dir, f"{base_name}_diagram_{i:02d}.png")
            cv2.imwrite(diagram_path, valid_crops[idx])
            diagram_paths.append(diagram_path)
            print(f"üíæ ƒê√£ l∆∞u diagram {i}: {diagram_path}")
        
        return preview_path, diagram_paths, stats
    
    def extract_diagrams_from_folder(self, input_folder, file_extensions=None):
        """
        X·ª≠ l√Ω t·∫•t c·∫£ ·∫£nh trong th∆∞ m·ª•c
        
        Args:
            input_folder: th∆∞ m·ª•c ch·ª©a ·∫£nh input
            file_extensions: danh s√°ch extension ƒë∆∞·ª£c h·ªó tr·ª£
            
        Returns:
            dict ch·ª©a k·∫øt qu·∫£ x·ª≠ l√Ω cho t·ª´ng file
        """
        if file_extensions is None:
            file_extensions = ['.png', '.jpg', '.jpeg', '.bmp', '.tiff', '.tif']
        
        input_path = Path(input_folder)
        if not input_path.exists():
            raise FileNotFoundError(f"Th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i: {input_folder}")
        
        results = {}
        image_files = []
        
        # T√¨m t·∫•t c·∫£ file ·∫£nh
        for ext in file_extensions:
            image_files.extend(input_path.glob(f"*{ext}"))
            image_files.extend(input_path.glob(f"*{ext.upper()}"))
        
        print(f"üîç T√¨m th·∫•y {len(image_files)} file ·∫£nh trong {input_folder}")
        
        for image_file in image_files:
            try:
                print(f"\n{'='*60}")
                preview, diagrams, stats = self.extract_diagrams(str(image_file))
                results[image_file.name] = {
                    'preview': preview,
                    'diagrams': diagrams,
                    'stats': stats,
                    'success': True
                }
            except Exception as e:
                print(f"‚ùå L·ªói khi x·ª≠ l√Ω {image_file.name}: {e}")
                results[image_file.name] = {
                    'error': str(e),
                    'success': False
                }
        
        return results
