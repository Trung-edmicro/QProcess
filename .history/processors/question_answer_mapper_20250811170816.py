"""
Question Answer Mapper - Version ƒë∆°n gi·∫£n
Ch·ªâ g·ª≠i n·ªôi dung file .md cho AI v√† nh·∫≠n k·∫øt qu·∫£
"""
import os
from datetime import datetime
from config.vertex_ai_config import VertexAIConfig
from vertexai.generative_models import GenerativeModel, GenerationConfig

class QuestionAnswerMapper:
    """Class ƒë∆°n gi·∫£n ƒë·ªÉ mapping c√¢u h·ªèi v·ªõi l·ªùi gi·∫£i b·∫±ng AI"""
    
    def __init__(self):
        """Kh·ªüi t·∫°o mapper v·ªõi Vertex AI"""
        self.vertex_config = VertexAIConfig()
        self.model = None
        self._initialize_model()
    
    def _initialize_model(self):
        """Kh·ªüi t·∫°o Vertex AI model"""
        try:
            if self.vertex_config.is_configured():
                self.vertex_config.initialize_vertex_ai()
                self.model = GenerativeModel(
                    model_name="gemini-2.5-flash",  # S·ª≠ d·ª•ng Flash cho mapping nhanh
                    generation_config=GenerationConfig(
                        temperature=0.1,
                        top_p=0.8,
                        top_k=20,
                        max_output_tokens=30000
                    )
                )
                print("‚úÖ Vertex AI model ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o cho Question-Answer Mapper")
            else:
                print("‚ùå Vertex AI ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh ƒë√∫ng")
        except Exception as e:
            print(f"‚ùå L·ªói kh·ªüi t·∫°o Vertex AI model: {e}")
    
    def process_content(self, content):
        """
        G·ª≠i n·ªôi dung cho AI ƒë·ªÉ mapping c√¢u h·ªèi v·ªõi l·ªùi gi·∫£i
        Args:
            content: N·ªôi dung file .md
        Returns:
            str: K·∫øt qu·∫£ ƒë√£ mapping ho·∫∑c None n·∫øu l·ªói
        """
        if not self.model:
            print("‚ùå Model ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o")
            return None
        
        try:
            # T·∫°o prompt ƒë∆°n gi·∫£n v√† r√µ r√†ng
            prompt = f"""
B·∫°n h√£y ƒë√≥ng vai tr√≤ l√† m·ªôt tr·ª£ l√Ω bi√™n t·∫≠p t√†i li·ªáu.
Nhi·ªám v·ª• c·ªßa b·∫°n l√† ƒë·ªçc to√†n b·ªô n·ªôi dung ƒë∆∞·ª£c cung c·∫•p, sau ƒë√≥ s·∫Øp x·∫øp l·∫°i b·∫±ng c√°ch gh√©p m·ªói c√¢u h·ªèi v·ªõi l·ªùi gi·∫£i chi ti·∫øt t∆∞∆°ng ·ª©ng c·ªßa n√≥.

**Y√™u c·∫ßu ƒë·ªãnh d·∫°ng ƒë·∫ßu ra:**
M·ªói c·∫∑p c√¢u h·ªèi - l·ªùi gi·∫£i ph·∫£i tu√¢n th·ªß nghi√™m ng·∫∑t theo c·∫•u tr√∫c sau:

**C√¢u [S·ªë]:** [To√†n b·ªô n·ªôi dung c√¢u h·ªèi v√† c√°c ƒë√°p √°n A, B, C, D...]
L·ªùi gi·∫£i
[N·ªôi dung l·ªùi gi·∫£i chi ti·∫øt t∆∞∆°ng ·ª©ng v·ªõi c√¢u h·ªèi ƒë√≥]

**L∆∞u √Ω quan tr·ªçng:**
- Tr·∫£ v·ªÅ n·ªôi dung g·ªëc bao g·ªìm Ph·∫ßn v√† c√¢u, kh√¥ng l∆∞·ª£c b·ªè n·ªôi dung quan tr·ªçng, nhi·ªám v·ª• ch·ªâ l√† gh√©p c·∫∑p c√¢u h·ªèi v·ªõi l·ªùi gi·∫£i.
- Tuy·ªát ƒë·ªëi **kh√¥ng b·ªãa n·ªôi dung**, kh√¥ng th√™m t·ª´ ng·ªØ n√†o kh√°c (nh∆∞ "D∆∞·ªõi ƒë√¢y l√† n·ªôi dung ƒë√£ ƒë∆∞·ª£c s·∫Øp x·∫øp l·∫°i theo y√™u c·∫ßu:"), kh√¥ng t·ª± √Ω th√™m l·ªùi gi·∫£i n·∫øu kh√¥ng c√≥ ngu·ªìn nh∆∞ "h∆∞·ªõng d·∫´n gi·∫£i" trong n·ªôi dung.
- X·ª≠ l√Ω t·∫•t c·∫£ c√°c c√¢u h·ªèi c√≥ trong t√†i li·ªáu.

B√¢y gi·ªù, h√£y x·ª≠ l√Ω n·ªôi dung d∆∞·ªõi ƒë√¢y:
{content}
"""
            
            # G·ª≠i cho AI
            print(f"ü§ñ ƒêang g·ª≠i {len(content):,} k√Ω t·ª± cho AI...")
            response = self.model.generate_content(prompt)
            
            if response and response.text:
                print("‚úÖ AI ƒë√£ tr·∫£ v·ªÅ k·∫øt qu·∫£")
                return response.text
            else:
                print("‚ùå AI kh√¥ng tr·∫£ v·ªÅ k·∫øt qu·∫£")
                return None
                
        except Exception as e:
            print(f"‚ùå L·ªói khi g·ª≠i cho AI: {e}")
            return None
    
    def process_file(self, input_file, output_file=None):
        """
        X·ª≠ l√Ω mapping t·ª´ file input v√† l∆∞u k·∫øt qu·∫£
        Args:
            input_file: File .md ƒë·∫ßu v√†o
            output_file: File output (t·ª± ƒë·ªông t·∫°o n·∫øu None)
        Returns:
            str: ƒê∆∞·ªùng d·∫´n file output ho·∫∑c None n·∫øu l·ªói
        """
        try:
            # ƒê·ªçc file input
            with open(input_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            print(f"üìñ ƒê√£ ƒë·ªçc file: {os.path.basename(input_file)} ({len(content):,} k√Ω t·ª±)")
            
            # X·ª≠ l√Ω mapping
            result = self.process_content(content)
            
            if not result:
                print("‚ùå Kh√¥ng c√≥ k·∫øt qu·∫£ ƒë·ªÉ l∆∞u")
                return None
            
            # T·∫°o t√™n file output n·∫øu ch∆∞a c√≥
            if not output_file:
                base_name = os.path.splitext(os.path.basename(input_file))[0]
                timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                output_file = f"data/output/{base_name}_mapped_{timestamp}.md"
            
            # ƒê·∫£m b·∫£o th∆∞ m·ª•c t·ªìn t·∫°i
            os.makedirs(os.path.dirname(output_file), exist_ok=True)
            
            # Ghi file
            with open(output_file, 'w', encoding='utf-8') as f:
                f.write(result)
            
            print(f"‚úÖ ƒê√£ l∆∞u k·∫øt qu·∫£: {output_file}")
            return output_file
            
        except Exception as e:
            print(f"‚ùå L·ªói x·ª≠ l√Ω file: {e}")
            return None
