import os
import sys
import time
import re
import traceback
import multiprocessing as mp
from config import app_config
from datetime import datetime
from vertexai.generative_models import GenerativeModel, Part, GenerationConfig
from concurrent.futures import ProcessPoolExecutor, as_completed
from processors import ExamProcessor, QuestionAnswerMapper
from processors.image_processor import save_diagrams_from_line_data, insert_diagrams_into_text

# PDF processing imports for Mode 1
try:
    from pdf2image import convert_from_path
    import tempfile
    PDF_SUPPORT = True
except ImportError:
    PDF_SUPPORT = False
    print("‚ö†Ô∏è PDF support cho Mode 1 kh√¥ng kh·∫£ d·ª•ng. C√†i ƒë·∫∑t: pip install pdf2image")
    print("‚ö†Ô∏è V√† c√†i ƒë·∫∑t poppler-utils (Windows: choco install poppler)")

def convert_pdf_to_images(pdf_path, dpi=200):
    """
    Convert PDF th√†nh list c√°c ·∫£nh ƒë·ªÉ x·ª≠ l√Ω b·∫±ng Vertex AI
    Args:
        pdf_path: ƒë∆∞·ªùng d·∫´n file PDF
        dpi: ƒë·ªô ph√¢n gi·∫£i (200 DPI = balance quality vs speed)
    Returns:
        list c√°c ƒë∆∞·ªùng d·∫´n ·∫£nh t·∫°m ho·∫∑c None n·∫øu l·ªói
    """
    if not PDF_SUPPORT:
        print("‚ùå PDF support kh√¥ng kh·∫£ d·ª•ng!")
        return None
    
    try:
        print(f"üîÑ ƒêang convert PDF th√†nh ·∫£nh: {os.path.basename(pdf_path)}")
        
        # Convert PDF to images v·ªõi optimization
        images = convert_from_path(
            pdf_path, 
            dpi=dpi,
            fmt='JPEG',  # Format ·∫£nh output
            thread_count=mp.cpu_count(),  # S·ª≠ d·ª•ng multiple threads
            use_pdftocairo=True  # Faster rendering
        )
        
        print(f"‚úÖ ƒê√£ convert th√†nh {len(images)} ·∫£nh")
        
        # L∆∞u ·∫£nh t·∫°m
        temp_image_paths = []
        temp_dir = tempfile.mkdtemp(prefix="qprocess_pdf_")
        
        for i, image in enumerate(images):
            temp_path = os.path.join(temp_dir, f"page_{i+1:03d}.png")
            image.save(temp_path, 'PNG', optimize=True)
            temp_image_paths.append(temp_path)
            print(f"üíæ Trang {i+1}: {os.path.basename(temp_path)}")
        
        return temp_image_paths
        
    except Exception as e:
        print(f"‚ùå L·ªói convert PDF: {str(e)}")
        return None

def cleanup_temp_images(image_paths):
    """
    D·ªçn d·∫πp c√°c file ·∫£nh t·∫°m
    Args:
        image_paths: list ƒë∆∞·ªùng d·∫´n ·∫£nh t·∫°m
    """
    if not image_paths:
        return
    
    try:
        # X√≥a file
        for path in image_paths:
            if os.path.exists(path):
                os.remove(path)
        
        # X√≥a th∆∞ m·ª•c t·∫°m
        temp_dir = os.path.dirname(image_paths[0])
        if os.path.exists(temp_dir):
            os.rmdir(temp_dir)
            
        print(f"üßπ ƒê√£ d·ªçn d·∫πp {len(image_paths)} file ·∫£nh t·∫°m")
        
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói d·ªçn d·∫πp temp files: {str(e)}")

def ocr_single_pdf_vertex_ai(pdf_path, index=None, show_result=False):
    """
    X·ª≠ l√Ω OCR m·ªôt PDF ƒë∆°n l·∫ª b·∫±ng Vertex AI - Mode 1
    Args:
        pdf_path: ƒë∆∞·ªùng d·∫´n PDF
        index: index c·ªßa PDF (cho multiprocessing), None cho single mode
        show_result: c√≥ hi·ªÉn th·ªã k·∫øt qu·∫£ chi ti·∫øt kh√¥ng (cho single mode)
    Returns:
        tuple (result_text, success, error_msg) cho single mode
        tuple (index, result_text, pdf_path, success, error_msg) cho multiprocessing
    """
    try:
        # X√°c ƒë·ªãnh prefix cho log messages
        prefix = f"[Process {index}]" if index is not None else ""
        
        if index is not None:
            print(f"üîÑ {prefix} B·∫Øt ƒë·∫ßu x·ª≠ l√Ω PDF (Vertex AI): {os.path.basename(pdf_path)}")
        else:
            print("=== TEST OCR PDF V·ªöI VERTEX AI ===")
            print(f"üìÑ ƒêang x·ª≠ l√Ω PDF: {os.path.basename(pdf_path)}")
        
        # Ki·ªÉm tra PDF support
        if not PDF_SUPPORT:
            error_msg = "PDF support kh√¥ng kh·∫£ d·ª•ng (thi·∫øu pdf2image)"
            if index is not None:
                return (index, None, pdf_path, False, error_msg)
            else:
                print(f"‚ùå {error_msg}")
                return (None, False, error_msg)
        
        # Ki·ªÉm tra file
        if not os.path.exists(pdf_path):
            error_msg = f"File kh√¥ng t·ªìn t·∫°i: {pdf_path}"
            if index is not None:
                return (index, None, pdf_path, False, error_msg)
            else:
                print(f"‚ùå {error_msg}")
                return (None, False, error_msg)
        
        # Convert PDF th√†nh ·∫£nh
        temp_image_paths = convert_pdf_to_images(pdf_path, dpi=150)  # Lower DPI for speed
        
        if not temp_image_paths:
            error_msg = "Kh√¥ng th·ªÉ convert PDF th√†nh ·∫£nh"
            if index is not None:
                return (index, None, pdf_path, False, error_msg)
            else:
                print(f"‚ùå {error_msg}")
                return (None, False, error_msg)
        
        # X·ª≠ l√Ω t·ª´ng trang b·∫±ng Vertex AI v·ªõi multiprocessing
        if index is None:
            print(f"üîÑ X·ª≠ l√Ω {len(temp_image_paths)} trang b·∫±ng Vertex AI (multiprocessing)...")
        
        # S·ª≠ d·ª•ng multiprocessing ƒë·ªÉ x·ª≠ l√Ω c√°c trang song song
        if len(temp_image_paths) > 1:
            # T·∫°o list (page_index, image_path) 
            page_info_list = [(i, path) for i, path in enumerate(temp_image_paths)]
            
            # X·ª≠ l√Ω song song v·ªõi s·ªë workers = min(s·ªë trang, s·ªë CPU)
            max_workers = min(len(temp_image_paths), mp.cpu_count())
            page_results = []
            
            try:
                with ProcessPoolExecutor(max_workers=max_workers) as executor:
                    # Submit jobs
                    future_to_page = {
                        executor.submit(ocr_single_image, image_path, page_idx, False): (page_idx, image_path)
                        for page_idx, image_path in page_info_list
                    }
                    
                    # Collect results
                    for future in as_completed(future_to_page):
                        try:
                            result = future.result()
                            page_results.append(result)
                        except Exception as e:
                            page_idx, image_path = future_to_page[future]
                            print(f"‚ö†Ô∏è L·ªói x·ª≠ l√Ω trang {page_idx + 1}: {str(e)}")
                            page_results.append((page_idx, None, image_path, False, str(e)))
                
                # S·∫Øp x·∫øp k·∫øt qu·∫£ theo th·ª© t·ª± trang
                page_results.sort(key=lambda x: x[0])
                
            except Exception as e:
                print(f"‚ö†Ô∏è L·ªói multiprocessing, chuy·ªÉn sang x·ª≠ l√Ω tu·∫ßn t·ª±: {str(e)}")
                # Fallback to sequential processing
                page_results = []
                for i, image_path in enumerate(temp_image_paths):
                    result = ocr_single_image(image_path, index=None, show_result=False)
                    if result:
                        page_results.append((i, result[0], image_path, result[1], result[2]))
                    else:
                        page_results.append((i, None, image_path, False, "Unknown error"))
        else:
            # Ch·ªâ c√≥ 1 trang, x·ª≠ l√Ω tr·ª±c ti·∫øp
            result = ocr_single_image(temp_image_paths[0], index=None, show_result=False)
            if result:
                page_results = [(0, result[0], temp_image_paths[0], result[1], result[2])]
            else:
                page_results = [(0, None, temp_image_paths[0], False, "Unknown error")]
        
        # T·ªïng h·ª£p k·∫øt qu·∫£
        all_results = []
        successful_pages = 0
        
        for page_idx, result_text, image_path, success, error_msg in page_results:
            page_num = page_idx + 1
            
            if success and result_text:
                all_results.append(f"## Trang {page_num}\n\n{result_text}")
                successful_pages += 1
            else:
                if index is None:
                    print(f"‚ö†Ô∏è L·ªói trang {page_num}: {error_msg}")
                all_results.append(f"## Trang {page_num}\n\n‚ùå L·ªói x·ª≠ l√Ω: {error_msg}")
        
        # D·ªçn d·∫πp temp files
        cleanup_temp_images(temp_image_paths)
        
        # T·ªïng h·ª£p k·∫øt qu·∫£
        if successful_pages > 0:
            combined_text = "\n\n".join(all_results)
            
            if index is not None:
                print(f"‚úÖ {prefix} Ho√†n th√†nh: {successful_pages}/{len(temp_image_paths)} trang")
                return (index, combined_text, pdf_path, True, None)
            else:
                print(f"‚úÖ Ho√†n th√†nh PDF: {successful_pages}/{len(temp_image_paths)} trang th√†nh c√¥ng")
                if show_result:
                    print("\n" + "="*60)
                    print("üìÑ K·∫æT QU·∫¢ OCR PDF (VERTEX AI):")
                    print("="*60)
                    print(combined_text[:1000] + "..." if len(combined_text) > 1000 else combined_text)
                    print("="*60)
                return (combined_text, True, None)
        else:
            error_msg = f"Kh√¥ng c√≥ trang n√†o x·ª≠ l√Ω th√†nh c√¥ng (0/{len(temp_image_paths)})"
            if index is not None:
                return (index, None, pdf_path, False, error_msg)
            else:
                print(f"‚ùå {error_msg}")
                return (None, False, error_msg)
                
    except Exception as e:
        error_msg = f"L·ªói khi x·ª≠ l√Ω PDF v·ªõi Vertex AI {pdf_path}: {str(e)}"
        if index is not None:
            print(f"‚ùå {prefix} {error_msg}")
            return (index, None, pdf_path, False, error_msg)
        else:
            print(f"‚ùå {error_msg}")
            import traceback
            traceback.print_exc()
            return (None, False, error_msg)

def ocr_multiple_pdfs_vertex_ai(input_folder, output_folder):
    """X·ª≠ l√Ω OCR nhi·ªÅu PDF v·ªõi Vertex AI - Mode 1"""
    print("=== BATCH OCR MULTIPLE PDFs V·ªöI VERTEX AI (MODE 1) ===")
    
    # Ki·ªÉm tra PDF support
    if not PDF_SUPPORT:
        print("‚ùå PDF support kh√¥ng kh·∫£ d·ª•ng. C·∫ßn c√†i ƒë·∫∑t: pip install pdf2image")
        print("   V√† c√†i ƒë·∫∑t poppler-utils (xem h∆∞·ªõng d·∫´n: https://pypi.org/project/pdf2image/)")
        return
    
    # Ki·ªÉm tra th∆∞ m·ª•c input
    if not os.path.exists(input_folder):
        print(f"‚ùå Th∆∞ m·ª•c input kh√¥ng t·ªìn t·∫°i: {input_folder}")
        return
    
    # T·∫°o th∆∞ m·ª•c output
    os.makedirs(output_folder, exist_ok=True)
    
    # T√¨m t·∫•t c·∫£ file PDF
    pdf_files = [f for f in os.listdir(input_folder) if f.lower().endswith('.pdf')]
    
    if not pdf_files:
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file PDF n√†o trong: {input_folder}")
        return
    
    print(f"üìÑ T√¨m th·∫•y {len(pdf_files)} file PDF")
    print(f"üìÅ K·∫øt qu·∫£ s·∫Ω ƒë∆∞·ª£c l∆∞u t·∫°i: {output_folder}")
    
    # T·∫°o list paths
    pdf_paths = [os.path.join(input_folder, pdf_file) for pdf_file in pdf_files]
    
    start_time = time.time()
    
    # X·ª≠ l√Ω song song
    with ProcessPoolExecutor(max_workers=mp.cpu_count()) as executor:
        print(f"üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω song song v·ªõi {mp.cpu_count()} process...")
        
        # Submit jobs v·ªõi index
        futures = {
            executor.submit(ocr_single_pdf_vertex_ai, pdf_path, i): (i, pdf_path) 
            for i, pdf_path in enumerate(pdf_paths)
        }
        
        # Thu th·∫≠p k·∫øt qu·∫£
        results = []
        for future in as_completed(futures):
            try:
                result = future.result()
                results.append(result)
            except Exception as e:
                i, pdf_path = futures[future]
                print(f"‚ùå [Process {i}] Exception: {str(e)}")
                results.append((i, None, pdf_path, False, str(e)))
    
    # S·∫Øp x·∫øp k·∫øt qu·∫£ theo index
    results.sort(key=lambda x: x[0])
    
    # T·∫°o file t·ªïng h·ª£p
    combined_results = []
    successful_count = 0
    failed_files = []
    
    for i, result_text, pdf_path, success, error_msg in results:
        filename = os.path.basename(pdf_path)
        
        if success and result_text:
            successful_count += 1
            combined_results.append(f"# {filename}\n\n{result_text}")
            
            # L∆∞u file ri√™ng l·∫ª
            individual_output = os.path.join(output_folder, f"{os.path.splitext(filename)[0]}_processed.md")
            with open(individual_output, 'w', encoding='utf-8') as f:
                f.write(result_text)
            print(f"‚úÖ [File {i+1}] ƒê√£ l∆∞u: {os.path.basename(individual_output)}")
        else:
            failed_files.append((filename, error_msg or "Unknown error"))
            print(f"‚ùå [File {i+1}] L·ªói {filename}: {error_msg}")
    
    # L∆∞u file t·ªïng h·ª£p
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    combined_output_file = os.path.join(output_folder, f"ocr_multiple_pdfs_{timestamp}_processed.md")
    
    with open(combined_output_file, 'w', encoding='utf-8') as f:
        f.write("# K·∫øt qu·∫£ OCR Multiple PDFs (Vertex AI)\n\n")
        f.write(f"**Th·ªùi gian x·ª≠ l√Ω:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write(f"**Mode:** Vertex AI (Google Gemini 2.5-pro)\n")
        f.write(f"**T·ªïng files:** {len(pdf_files)}\n")
        f.write(f"**Th√†nh c√¥ng:** {successful_count}\n")
        f.write(f"**Th·∫•t b·∫°i:** {len(failed_files)}\n\n")
        
        if failed_files:
            f.write("## ‚ùå Files th·∫•t b·∫°i:\n\n")
            for filename, error in failed_files:
                f.write(f"- **{filename}**: {error}\n")
            f.write("\n")
        
        f.write("---\n\n")
        f.write("\n\n".join(combined_results))
    
    end_time = time.time()
    processing_time = end_time - start_time
    
    print("\n" + "="*60)
    print("üìä T·ªîNG K·∫æT BATCH OCR PDFs (VERTEX AI)")
    print("="*60)
    print(f"üìÑ T·ªïng files PDF: {len(pdf_files)}")
    print(f"‚úÖ Th√†nh c√¥ng: {successful_count}")
    print(f"‚ùå Th·∫•t b·∫°i: {len(failed_files)}")
    print(f"‚è±Ô∏è Th·ªùi gian x·ª≠ l√Ω: {processing_time:.2f} gi√¢y")
    print(f"‚ö° T·ªëc ƒë·ªô trung b√¨nh: {processing_time/len(pdf_files):.2f} gi√¢y/file")
    print(f"üìÅ File t·ªïng h·ª£p: {os.path.basename(combined_output_file)}")
    print("="*60)

def ocr_single_image(image_path, index=None, show_result=False):
    """
    X·ª≠ l√Ω OCR m·ªôt ·∫£nh ƒë∆°n l·∫ª - function chung cho c·∫£ single mode v√† multiprocessing
    Args:
        image_path: ƒë∆∞·ªùng d·∫´n ·∫£nh
        index: index c·ªßa ·∫£nh (cho multiprocessing), None cho single mode
        show_result: c√≥ hi·ªÉn th·ªã k·∫øt qu·∫£ chi ti·∫øt kh√¥ng (cho single mode)
    Returns:
        tuple (result_text, success, error_msg) cho single mode
        tuple (index, result_text, image_path, success, error_msg) cho multiprocessing
    """
    try:
        # X√°c ƒë·ªãnh prefix cho log messages
        prefix = f"[Process {index}]" if index is not None else ""
        
        if index is not None:
            print(f"üîÑ {prefix} B·∫Øt ƒë·∫ßu x·ª≠ l√Ω: {os.path.basename(image_path)}")
        else:
            print("=== TEST OCR IMAGE V·ªöI VERTEX AI ===")
            print(f"üì∑ ƒêang x·ª≠ l√Ω ·∫£nh: {os.path.basename(image_path)}")
            
        if not app_config.vertex_ai.initialize_vertex_ai():
            error_msg = "Kh√¥ng th·ªÉ kh·ªüi t·∫°o Vertex AI!"
            if index is not None:
                return (index, None, image_path, False, error_msg)
            else:
                print(f"‚ùå {error_msg}")
                return (None, False, error_msg)
        
        # T·∫°o model
        model = GenerativeModel(app_config.vertex_ai.model_name)
        if index is None:
            print(f"‚úÖ ƒê√£ kh·ªüi t·∫°o model: {app_config.vertex_ai.model_name}")
        
        # ƒê·ªçc ·∫£nh v√† t·∫°o Part object
        if index is None:
            print("üìñ ƒêang ƒë·ªçc v√† x·ª≠ l√Ω ·∫£nh...")
            
        with open(image_path, "rb") as image_file:
            image_bytes = image_file.read()
        
        # X√°c ƒë·ªãnh mime type
        ext = os.path.splitext(image_path)[1].lower()
        if ext == '.png': 
            mime_type = 'image/png'
        elif ext in ('.jpg', '.jpeg'): 
            mime_type = 'image/jpeg'
        elif ext == '.gif': 
            mime_type = 'image/gif'
        elif ext == '.webp': 
            mime_type = 'image/webp'
        else: 
            mime_type = 'image/png'
        
        image_part = Part.from_data(data=image_bytes, mime_type=mime_type)
        if index is None:
            print(f"‚úÖ ƒê√£ t·∫°o image part v·ªõi mime type: {mime_type}")
        
        # T·∫°o prompt cho OCR
        text_prompt = """
        H√£y ƒë·ªçc v√† tr√≠ch xu·∫•t to√†n b·ªô text t·ª´ ·∫£nh n√†y. 
        Y√™u c·∫ßu chung:
        1. ƒê·ªçc ch√≠nh x√°c t·∫•t c·∫£ text c√≥ trong ·∫£nh
        2. Gi·ªØ nguy√™n format v√† c·∫•u tr√∫c c·ªßa text
        3. N·∫øu c√≥ c√¥ng th·ª©c to√°n h·ªçc, h√£y chuy·ªÉn sang ƒë·ªãnh d·∫°ng LaTeX
        4. B·ªè qua b·∫£ng, h√¨nh ·∫£nh, bi·ªÉu ƒë·ªì, v.v...
        5. Tr·∫£ v·ªÅ k·∫øt qu·∫£ ch·ªâ g·ªìm n·ªôi dung OCR ƒë∆∞·ª£c, kh√¥ng c·∫ßn gi·∫£i th√≠ch hay b√¨nh lu·∫≠n g√¨ th√™m.
        
        Y√™u c·∫ßu c·ª• th·ªÉ:
        1. Tr∆∞·ªùng h·ª£p ·∫£nh c√≥ k√≠ t·ª± ƒë·∫∑c bi·ªát (nh∆∞ ch·ªØ k√Ω, h√¨nh v·∫Ω tay) th√¨ kh√¥ng tr·∫£ v·ªÅ ·ªü k·∫øt qu·∫£.
        2. V·ªõi ·∫£nh l√† ƒë·ªÅ thi th√¨ c·∫ßn lo·∫°i b·ªè c√°c ph·∫ßn kh√¥ng li√™n quan nh∆∞ th√¥ng tin tr∆∞·ªùng/h·ªçc sinh, h∆∞·ªõng d·∫´n, s·ªë trang, m√£ ƒë·ªÅ.
        3. V√¨ l√† n·ªôi dung OCR li√™n quan ƒë·∫øn c√°c c√¢u h·ªèi n√™n c·∫ßn ƒë·∫£m b·∫£o c√≥ c√°c ph·∫ßn ti√™u ƒë·ªÅ, c√¢u h·ªèi, ƒë√°p √°n r√µ r√†ng v√† ƒë∆∞·ª£c in ƒë·∫≠m t√™n ph·∫ßn (**Ph·∫ßn I.{n·ªôi dung}**), s·ªë c√¢u (**C√¢u 1:**).
        4. V·ªõi c√¢u h·ªèi l√† d·∫°ng tr·∫Øc nghi·ªám, n·∫øu c√≥ ƒë√°p √°n ƒë√∫ng th√¥ng qua c√°c t·ª´ kh√≥a nh∆∞ "ƒê√°p √°n ƒë√∫ng l√†", "Ch·ªçn ƒë√°p √°n", "C√¢u tr·∫£ l·ªùi ƒë√∫ng l√†", "Khoanh tr√≤n b·∫±ng tay", "ƒê√°p √°n ƒë∆∞·ª£c b√¥i m√†u kh√°c v·ªõi ƒë√°p √°n c√≤n l·∫°i", v.v... th√¨ b√¥i ƒë·∫≠m ƒë√°p √°n ƒë√∫ng ·ªü k·∫øt qu·∫£ tr·∫£ v·ªÅ (v√≠ d·ª• **A.**).
        """
        
        text_part = Part.from_text(text_prompt)
        
        # T·∫°o generation config
        generation_config = GenerationConfig(
            temperature=0.1,
            top_p=0.8,
            max_output_tokens=8192
        )
        
        # G·ªçi API v·ªõi retry logic
        if index is None:
            print("üîÑ ƒêang g·ª≠i request ƒë·∫øn Vertex AI...")
            
        prompt_parts = [text_part, image_part]
        max_retries = 3
        
        for attempt in range(max_retries):
            try:
                if index is not None:
                    print(f"üîÑ {prefix} Th·ª≠ l·∫ßn {attempt + 1}/{max_retries}...")
                else:
                    print(f"üîÑ Th·ª≠ l·∫ßn {attempt + 1}/{max_retries}...")
                
                response = model.generate_content(
                    prompt_parts, 
                    generation_config=generation_config, 
                    stream=False
                )
                
                if response and response.text:
                    # Th√†nh c√¥ng
                    if index is not None:
                        print(f"‚úÖ {prefix} Ho√†n th√†nh: {os.path.basename(image_path)}")
                        return (index, response.text, image_path, True, None)
                    else:
                        print("‚úÖ ƒê√£ nh·∫≠n ƒë∆∞·ª£c k·∫øt qu·∫£ OCR!")
                        if show_result:
                            print("\n" + "="*60)
                            print("üìÑ K·∫æT QU·∫¢ OCR:")
                            print("="*60)
                            print(response.text)
                            print("="*60)
                        return (response.text, True, None)
                else:
                    # Kh√¥ng c√≥ k·∫øt qu·∫£
                    retry_msg = f"L·∫ßn th·ª≠ {attempt + 1}: Kh√¥ng nh·∫≠n ƒë∆∞·ª£c k·∫øt qu·∫£ t·ª´ Vertex AI"
                    if index is not None:
                        print(f"‚ö†Ô∏è {prefix} {retry_msg}")
                    else:
                        print(f"‚ö†Ô∏è {retry_msg}")
                        
                    if attempt < max_retries - 1:  # Kh√¥ng sleep ·ªü l·∫ßn th·ª≠ cu·ªëi
                        if index is None:
                            print("‚è≥ ƒê·ª£i 2 gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i...")
                        time.sleep(2)
                        
            except Exception as api_error:
                # L·ªói API
                error_msg = f"L·∫ßn th·ª≠ {attempt + 1}: L·ªói API - {str(api_error)}"
                if index is not None:
                    print(f"‚ö†Ô∏è {prefix} {error_msg}")
                else:
                    print(f"‚ö†Ô∏è {error_msg}")
                    
                if attempt < max_retries - 1:  # Kh√¥ng sleep ·ªü l·∫ßn th·ª≠ cu·ªëi
                    if index is None:
                        print("‚è≥ ƒê·ª£i 2 gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i...")
                    time.sleep(2)
        
        # N·∫øu t·∫•t c·∫£ attempts ƒë·ªÅu th·∫•t b·∫°i
        final_error = f"Kh√¥ng nh·∫≠n ƒë∆∞·ª£c k·∫øt qu·∫£ t·ª´ Vertex AI sau {max_retries} l·∫ßn th·ª≠"
        if index is not None:
            return (index, None, image_path, False, final_error)
        else:
            print(f"‚ùå {final_error}")
            return (None, False, final_error)
            
    except Exception as e:
        error_msg = f"L·ªói khi x·ª≠ l√Ω ·∫£nh {image_path}: {str(e)}"
        if index is not None:
            print(f"‚ùå {prefix} {error_msg}")
            return (index, None, image_path, False, error_msg)
        else:
            print(f"‚ùå {error_msg}")
            import traceback
            traceback.print_exc()
            return (None, False, error_msg)

def process_single_image(image_info):
    """
    Wrapper cho multiprocessing - g·ªçi ocr_single_image
    Args:
        image_info: tuple (index, image_path)
    Returns:
        tuple (index, result_text, image_path, success, error_msg)
    """
    index, image_path = image_info
    return ocr_single_image(image_path, index=index, show_result=False)

def ocr_single_image_mathpix(image_path, index=None, show_result=False):
    """
    X·ª≠ l√Ω OCR m·ªôt ·∫£nh ƒë∆°n l·∫ª b·∫±ng Mathpix API - Mode 2
    Args:
        image_path: ƒë∆∞·ªùng d·∫´n ·∫£nh
        index: index c·ªßa ·∫£nh (cho multiprocessing), None cho single mode
        show_result: c√≥ hi·ªÉn th·ªã k·∫øt qu·∫£ chi ti·∫øt kh√¥ng (cho single mode)
    Returns:
        tuple (result_text, success, error_msg) cho single mode
        tuple (index, result_text, image_path, success, error_msg) cho multiprocessing
    """
    try:
        # X√°c ƒë·ªãnh prefix cho log messages
        prefix = f"[Process {index}]" if index is not None else ""
        
        if index is not None:
            print(f"üîÑ {prefix} B·∫Øt ƒë·∫ßu x·ª≠ l√Ω (Mathpix): {os.path.basename(image_path)}")
        else:
            print("=== TEST OCR IMAGE V·ªöI MATHPIX API ===")
            print(f"üì∑ ƒêang x·ª≠ l√Ω ·∫£nh: {os.path.basename(image_path)}")
        
        # Ki·ªÉm tra c·∫•u h√¨nh Mathpix
        if not app_config.mathpix.is_configured():
            error_msg = "Mathpix API ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh!"
            if index is not None:
                return (index, None, image_path, False, error_msg)
            else:
                print(f"‚ùå {error_msg}")
                print("üí° H√£y thi·∫øt l·∫≠p MATHPIX_APP_ID v√† MATHPIX_APP_KEY trong .env")
                return (None, False, error_msg)
        
        if index is None:
            print("‚úÖ Mathpix API ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh")
        
        # Ki·ªÉm tra file c√≥ t·ªìn t·∫°i v√† ƒë∆∞·ª£c h·ªó tr·ª£
        if not os.path.exists(image_path):
            error_msg = f"File kh√¥ng t·ªìn t·∫°i: {image_path}"
            if index is not None:
                return (index, None, image_path, False, error_msg)
            else:
                print(f"‚ùå {error_msg}")
                return (None, False, error_msg)
        
        if not app_config.mathpix.is_supported_image(image_path):
            error_msg = f"Format file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: {image_path}"
            if index is not None:
                return (index, None, image_path, False, error_msg)
            else:
                print(f"‚ùå {error_msg}")
                supported = ', '.join(app_config.mathpix.get_supported_formats())
                print(f"üí° C√°c format ƒë∆∞·ª£c h·ªó tr·ª£: {supported}")
                return (None, False, error_msg)
        
        # T√πy ch·ªçn OCR cho ƒë·ªÅ thi/to√°n h·ªçc
        mathpix_options = {
            "formats": ["mmd"],
            "math_inline_delimiters": ["$", "$"],
            "math_display_delimiters": ["$$", "$$"],
            "include_annotated_image": True,
            "include_image_links": True,
            "include_line_data": True,
            "include_diagram": True,
            "include_diagram_text": True,
            "rm_spaces": True,
            "rm_fonts": False,
            "numbers_default_to_math": True
        }
        
        if index is None:
            print("üîÑ ƒêang g·ª≠i request ƒë·∫øn Mathpix API...")
        
        # G·ªçi Mathpix API
        result = app_config.mathpix.ocr_image(image_path, mathpix_options)
        
        diagram_files = save_diagrams_from_line_data(image_path, result, base_outdir="data/diagrams")

        if diagram_files:
            print(f"üñºÔ∏è ƒê√£ l∆∞u {len(diagram_files)} h√¨nh diagram v√†o:", os.path.dirname(diagram_files[0]["path"]))
            # In k√®m id & bbox ƒë·ªÉ debug
            for d in diagram_files:
                print(f"   - {os.path.basename(d['path'])}  id={d['id']}  bbox={d['bbox']}")

        if result and result.get('text'):
            # Post-process k·∫øt qu·∫£ ƒë·ªÉ ph√π h·ª£p v·ªõi format ƒë·ªÅ thi
            processed_text = post_process_mathpix_result(result)

            augmented_text = insert_diagrams_into_text(
                raw_text=processed_text,
                result=result,
                diagram_files=diagram_files,
                min_gap_px=8
            )
            
            if index is not None:
                print(f"‚úÖ {prefix} Ho√†n th√†nh: {os.path.basename(image_path)}")
                return (index, augmented_text, image_path, True, None)
            else:
                print("‚úÖ ƒê√£ nh·∫≠n ƒë∆∞·ª£c k·∫øt qu·∫£ OCR t·ª´ Mathpix!")
                if show_result:
                    print("\n" + "="*60)
                    print("üìÑ K·∫æT QU·∫¢ OCR (MATHPIX):")
                    print("="*60)
                    print(augmented_text)
                    print("="*60)
                    print(f"üéØ Confidence: {result.get('confidence', 'N/A')}")
                    print(f"üìè Image size: {result.get('image_width', 'N/A')}x{result.get('image_height', 'N/A')}")
            
                    return (augmented_text, True, None)
                
        else:
            error_msg = "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c k·∫øt qu·∫£ t·ª´ Mathpix API"
            if index is not None:
                return (index, None, image_path, False, error_msg)
            else:
                print(f"‚ùå {error_msg}")
                return (None, False, error_msg)
                
    except Exception as e:
        error_msg = f"L·ªói khi x·ª≠ l√Ω ·∫£nh v·ªõi Mathpix {image_path}: {str(e)}"
        if index is not None:
            print(f"‚ùå {prefix} {error_msg}")
            return (index, None, image_path, False, error_msg)
        else:
            print(f"‚ùå {error_msg}")
            import traceback
            traceback.print_exc()
            return (None, False, error_msg)

def post_process_mathpix_result(mathpix_result):
    """
    Post-process k·∫øt qu·∫£ t·ª´ Mathpix ƒë·ªÉ ph√π h·ª£p v·ªõi format ƒë·ªÅ thi
    Args:
        mathpix_result: dict k·∫øt qu·∫£ t·ª´ Mathpix API
    Returns:
        str: text ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
    """
    text = mathpix_result.get('text', '')
    
    if not text:
        return ''
    
    # X·ª≠ l√Ω format ƒë·ªÅ thi
    lines = text.split('\n')
    processed_lines = []
    
    for line in lines:
        line = line.strip()
        if not line:
            processed_lines.append('')
            continue
        
        # X·ª≠ l√Ω c√°c ph·∫ßn c·ªßa ƒë·ªÅ thi
        line_lower = line.lower()
        
        # Ph·∫ßn I, II, III
        if any(keyword in line_lower for keyword in ['ph·∫ßn i', 'ph·∫ßn ii', 'ph·∫ßn iii', 'part i', 'part ii', 'part iii']):
            if not line.startswith('**'):
                line = f"**{line}**"
        
        # C√¢u h·ªèi (C√¢u 1, C√¢u 2, etc.)
        elif line.startswith('C√¢u ') or line.startswith('Question '):
            if ':' in line and not line.startswith('**'):
                parts = line.split(':', 1)
                line = f"**{parts[0]}:** {parts[1].strip()}" if len(parts) == 2 else f"**{line}**"
        
        processed_lines.append(line)
    
    return '\n'.join(processed_lines)

def ocr_single_pdf_mathpix(pdf_path, index=None, show_result=False):
    """
    X·ª≠ l√Ω OCR m·ªôt PDF ƒë∆°n l·∫ª b·∫±ng Mathpix API - Mode 2 
    Args:
        pdf_path: ƒë∆∞·ªùng d·∫´n PDF
        index: index c·ªßa PDF (cho multiprocessing), None cho single mode
        show_result: c√≥ hi·ªÉn th·ªã k·∫øt qu·∫£ chi ti·∫øt kh√¥ng (cho single mode)
    Returns:
        tuple (result_text, success, error_msg) cho single mode
        tuple (index, result_text, pdf_path, success, error_msg) cho multiprocessing
    """
    try:
        # X√°c ƒë·ªãnh prefix cho log messages
        prefix = f"[Process {index}]" if index is not None else ""
        
        if index is not None:
            print(f"üîÑ {prefix} B·∫Øt ƒë·∫ßu x·ª≠ l√Ω PDF (Mathpix): {os.path.basename(pdf_path)}")
        else:
            print("=== TEST OCR PDF V·ªöI MATHPIX API ===")
            print(f"üìÑ ƒêang x·ª≠ l√Ω PDF: {os.path.basename(pdf_path)}")
        
        # Ki·ªÉm tra c·∫•u h√¨nh Mathpix
        if not app_config.mathpix.is_configured():
            error_msg = "Mathpix API ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh!"
            if index is not None:
                return (index, None, pdf_path, False, error_msg)
            else:
                print(f"‚ùå {error_msg}")
                print("üí° H√£y thi·∫øt l·∫≠p MATHPIX_APP_ID v√† MATHPIX_APP_KEY trong .env")
                return (None, False, error_msg)
        
        if index is None:
            print("‚úÖ Mathpix API ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh")
        
        # Ki·ªÉm tra file c√≥ t·ªìn t·∫°i v√† l√† PDF
        if not os.path.exists(pdf_path):
            error_msg = f"File kh√¥ng t·ªìn t·∫°i: {pdf_path}"
            if index is not None:
                return (index, None, pdf_path, False, error_msg)
            else:
                print(f"‚ùå {error_msg}")
                return (None, False, error_msg)
        
        if not app_config.mathpix.is_supported_pdf(pdf_path):
            error_msg = f"File kh√¥ng ph·∫£i PDF: {pdf_path}"
            if index is not None:
                return (index, None, pdf_path, False, error_msg)
            else:
                print(f"‚ùå {error_msg}")
                return (None, False, error_msg)
        
        if index is None:
            print("üîÑ ƒêang x·ª≠ l√Ω PDF v·ªõi Mathpix API...")
        
        # G·ªçi Mathpix PDF API
        result_text = app_config.mathpix.process_pdf(pdf_path, timeout=120)
        
        if result_text and not result_text.startswith("PK"):  # Kh√¥ng ph·∫£i binary
            # Post-process k·∫øt qu·∫£ ƒë·ªÉ ph√π h·ª£p v·ªõi format ƒë·ªÅ thi
            processed_text = post_process_mathpix_result({'text': result_text})
            
            if index is not None:
                print(f"‚úÖ {prefix} Ho√†n th√†nh: {os.path.basename(pdf_path)}")
                return (index, processed_text, pdf_path, True, None)
            else:
                print("‚úÖ ƒê√£ nh·∫≠n ƒë∆∞·ª£c k·∫øt qu·∫£ OCR t·ª´ Mathpix PDF!")
                if show_result:
                    print("\n" + "="*60)
                    print("üìÑ K·∫æT QU·∫¢ OCR PDF (MATHPIX):")
                    print("="*60)
                    print(processed_text[:1000] + "..." if len(processed_text) > 1000 else processed_text)
                    print("="*60)
                return (processed_text, True, None)
        else:
            error_msg = "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c k·∫øt qu·∫£ text t·ª´ Mathpix PDF API"
            if index is not None:
                return (index, None, pdf_path, False, error_msg)
            else:
                print(f"‚ùå {error_msg}")
                return (None, False, error_msg)
                
    except Exception as e:
        error_msg = f"L·ªói khi x·ª≠ l√Ω PDF v·ªõi Mathpix {pdf_path}: {str(e)}"
        if index is not None:
            print(f"‚ùå {prefix} {error_msg}")
            return (index, None, pdf_path, False, error_msg)
        else:
            print(f"‚ùå {error_msg}")
            import traceback
            traceback.print_exc()
            return (None, False, error_msg)

def process_single_image_mathpix(image_info):
    """
    Wrapper cho multiprocessing - g·ªçi ocr_single_image_mathpix
    Args:
        image_info: tuple (index, image_path)
    Returns:
        tuple (index, result_text, image_path, success, error_msg)
    """
    index, image_path = image_info
    return ocr_single_image_mathpix(image_path, index=index, show_result=False)

def ocr_single_pdf_mathpix(pdf_path, index=None, show_result=False):
    """
    X·ª≠ l√Ω OCR m·ªôt file PDF b·∫±ng Mathpix API - Mode 2
    Args:
        pdf_path: ƒë∆∞·ªùng d·∫´n file PDF
        index: index c·ªßa file (cho multiprocessing), None cho single mode
        show_result: c√≥ hi·ªÉn th·ªã k·∫øt qu·∫£ chi ti·∫øt kh√¥ng (cho single mode)
    Returns:
        tuple (result_text, success, error_msg) cho single mode
        tuple (index, result_text, pdf_path, success, error_msg) cho multiprocessing
    """
    try:
        # X√°c ƒë·ªãnh prefix cho log messages
        prefix = f"[Process {index}]" if index is not None else ""
        
        if index is not None:
            print(f"üîÑ {prefix} B·∫Øt ƒë·∫ßu x·ª≠ l√Ω PDF (Mathpix): {os.path.basename(pdf_path)}")
        else:
            print("=== TEST OCR PDF V·ªöI MATHPIX API ===")
            print(f"üìÑ ƒêang x·ª≠ l√Ω PDF: {os.path.basename(pdf_path)}")
        
        # Ki·ªÉm tra c·∫•u h√¨nh Mathpix
        if not app_config.mathpix.is_configured():
            error_msg = "Mathpix API ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh!"
            if index is not None:
                return (index, None, pdf_path, False, error_msg)
            else:
                print(f"‚ùå {error_msg}")
                print("üí° H√£y thi·∫øt l·∫≠p MATHPIX_APP_ID v√† MATHPIX_APP_KEY trong .env")
                return (None, False, error_msg)
        
        if index is None:
            print("‚úÖ Mathpix API ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh")
        
        # Ki·ªÉm tra file c√≥ t·ªìn t·∫°i v√† ƒë∆∞·ª£c h·ªó tr·ª£
        if not os.path.exists(pdf_path):
            error_msg = f"File kh√¥ng t·ªìn t·∫°i: {pdf_path}"
            if index is not None:
                return (index, None, pdf_path, False, error_msg)
            else:
                print(f"‚ùå {error_msg}")
                return (None, False, error_msg)
        
        if not app_config.mathpix.is_supported_pdf(pdf_path):
            error_msg = f"File kh√¥ng ph·∫£i PDF: {pdf_path}"
            if index is not None:
                return (index, None, pdf_path, False, error_msg)
            else:
                print(f"‚ùå {error_msg}")
                return (None, False, error_msg)
        
        if index is None:
            print("üîÑ ƒêang x·ª≠ l√Ω PDF v·ªõi Mathpix API...")
        
        # G·ªçi Mathpix PDF API
        result_text = app_config.mathpix.process_pdf(pdf_path, timeout=120)
        
        if result_text:
            # Post-process k·∫øt qu·∫£ ƒë·ªÉ ph√π h·ª£p v·ªõi format ƒë·ªÅ thi
            processed_text = post_process_mathpix_result({'text': result_text})
            
            if index is not None:
                print(f"‚úÖ {prefix} Ho√†n th√†nh PDF: {os.path.basename(pdf_path)}")
                return (index, processed_text, pdf_path, True, None)
            else:
                print("‚úÖ ƒê√£ nh·∫≠n ƒë∆∞·ª£c k·∫øt qu·∫£ OCR PDF t·ª´ Mathpix!")
                if show_result:
                    print("\n" + "="*60)
                    print("üìÑ K·∫æT QU·∫¢ OCR PDF (MATHPIX):")
                    print("="*60)
                    print(processed_text[:500] + "..." if len(processed_text) > 500 else processed_text)
                    print("="*60)
                return (processed_text, True, None)
        else:
            error_msg = "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c k·∫øt qu·∫£ t·ª´ Mathpix PDF API"
            if index is not None:
                return (index, None, pdf_path, False, error_msg)
            else:
                print(f"‚ùå {error_msg}")
                return (None, False, error_msg)
                
    except Exception as e:
        error_msg = f"L·ªói khi x·ª≠ l√Ω PDF v·ªõi Mathpix {pdf_path}: {str(e)}"
        if index is not None:
            print(f"‚ùå {prefix} {error_msg}")
            return (index, None, pdf_path, False, error_msg)
        else:
            print(f"‚ùå {error_msg}")
            import traceback
            traceback.print_exc()
            return (None, False, error_msg)

def process_single_file_mathpix(file_info):
    """
    Wrapper cho multiprocessing - g·ªçi ocr_single_image_mathpix ho·∫∑c ocr_single_pdf_mathpix
    Args:
        file_info: tuple (index, file_path)
    Returns:
        tuple (index, result_text, file_path, success, error_msg)
    """
    index, file_path = file_info
    
    # Ki·ªÉm tra file type
    ext = os.path.splitext(file_path)[1].lower()
    
    if ext == '.pdf':
        return ocr_single_pdf_mathpix(file_path, index=index, show_result=False)
    else:
        return ocr_single_image_mathpix(file_path, index=index, show_result=False)

def process_multiple_images(image_paths, max_workers=None):
    """
    X·ª≠ l√Ω nhi·ªÅu ·∫£nh ƒë·ªìng th·ªùi b·∫±ng multiprocessing
    Args:
        image_paths: list ƒë∆∞·ªùng d·∫´n c√°c ·∫£nh
        max_workers: s·ªë process t·ªëi ƒëa (m·∫∑c ƒë·ªãnh = s·ªë CPU)
    Returns:
        list k·∫øt qu·∫£ theo th·ª© t·ª± input
    """
    if not image_paths:
        print("‚ùå Kh√¥ng c√≥ ·∫£nh n√†o ƒë·ªÉ x·ª≠ l√Ω!")
        return []
    
    # X√°c ƒë·ªãnh s·ªë workers
    if max_workers is None:
        max_workers = min(len(image_paths), mp.cpu_count())
    
    print(f"üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω {len(image_paths)} ·∫£nh v·ªõi {max_workers} processes")
    
    # T·∫°o list (index, image_path) ƒë·ªÉ gi·ªØ th·ª© t·ª±
    image_info_list = [(i, path) for i, path in enumerate(image_paths)]
    
    # Kh·ªüi t·∫°o list k·∫øt qu·∫£ v·ªõi None
    results = [None] * len(image_paths)
    
    start_time = time.time()
    
    try:
        with ProcessPoolExecutor(max_workers=max_workers) as executor:
            # Submit t·∫•t c·∫£ tasks
            future_to_info = {
                executor.submit(process_single_image, info): info 
                for info in image_info_list
            }
            
            # Collect results khi ho√†n th√†nh
            completed_count = 0
            for future in as_completed(future_to_info):
                try:
                    index, result_text, image_path, success, error_msg = future.result()
                    
                    # L∆∞u k·∫øt qu·∫£ theo ƒë√∫ng th·ª© t·ª±
                    results[index] = {
                        'index': index,
                        'image_path': image_path,
                        'result_text': result_text,
                        'success': success,
                        'error_msg': error_msg
                    }
                    
                    completed_count += 1
                    print(f"üìä Ti·∫øn ƒë·ªô: {completed_count}/{len(image_paths)} ·∫£nh ho√†n th√†nh")
                    
                except Exception as e:
                    # L·∫•y th√¥ng tin t·ª´ future_to_info n·∫øu c√≥ l·ªói
                    info = future_to_info[future]
                    index, image_path = info
                    results[index] = {
                        'index': index,
                        'image_path': image_path,
                        'result_text': None,
                        'success': False,
                        'error_msg': f"L·ªói future: {str(e)}"
                    }
                    completed_count += 1
                    print(f"‚ùå L·ªói x·ª≠ l√Ω ·∫£nh {image_path}: {str(e)}")
    
    except Exception as e:
        print(f"‚ùå L·ªói nghi√™m tr·ªçng trong multiprocessing: {str(e)}")
        return []
    
    end_time = time.time()
    total_time = end_time - start_time
    
    # Th·ªëng k√™ k·∫øt qu·∫£
    successful_count = sum(1 for r in results if r and r['success'])
    failed_count = len(results) - successful_count
    
    print(f"\nüìä K·∫æT QU·∫¢ T·ªîNG K·∫æT:")
    print(f"‚è±Ô∏è  Th·ªùi gian x·ª≠ l√Ω: {total_time:.2f} gi√¢y")
    print(f"‚úÖ Th√†nh c√¥ng: {successful_count}/{len(image_paths)} ·∫£nh")
    print(f"‚ùå Th·∫•t b·∫°i: {failed_count}/{len(image_paths)} ·∫£nh")
    print(f"üîÑ T·ªëc ƒë·ªô trung b√¨nh: {total_time/len(image_paths):.2f} gi√¢y/·∫£nh")
    
    return results

def process_multiple_files_mathpix(file_paths, max_workers=None):
    """
    X·ª≠ l√Ω nhi·ªÅu file (·∫£nh/PDF) ƒë·ªìng th·ªùi b·∫±ng multiprocessing v·ªõi Mathpix API - Mode 2
    Args:
        file_paths: list ƒë∆∞·ªùng d·∫´n c√°c file
        max_workers: s·ªë process t·ªëi ƒëa (m·∫∑c ƒë·ªãnh = s·ªë CPU)
    Returns:
        list k·∫øt qu·∫£ theo th·ª© t·ª± input
    """
    if not file_paths:
        print("‚ùå Kh√¥ng c√≥ file n√†o ƒë·ªÉ x·ª≠ l√Ω!")
        return []
    
    # Ph√¢n lo·∫°i file
    image_count = sum(1 for f in file_paths if os.path.splitext(f)[1].lower() != '.pdf')
    pdf_count = sum(1 for f in file_paths if os.path.splitext(f)[1].lower() == '.pdf')
    
    # X√°c ƒë·ªãnh s·ªë workers
    if max_workers is None:
        max_workers = min(len(file_paths), mp.cpu_count())
    
    print(f"üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω {len(file_paths)} file v·ªõi Mathpix API ({max_workers} processes)")
    print(f"   üì∑ ·∫¢nh: {image_count}")
    print(f"   üìÑ PDF: {pdf_count}")
    
    # T·∫°o list (index, file_path) ƒë·ªÉ gi·ªØ th·ª© t·ª±
    file_info_list = [(i, path) for i, path in enumerate(file_paths)]
    
    # Kh·ªüi t·∫°o list k·∫øt qu·∫£ v·ªõi None
    results = [None] * len(file_paths)
    
    start_time = time.time()
    
    try:
        with ProcessPoolExecutor(max_workers=max_workers) as executor:
            # Submit t·∫•t c·∫£ tasks
            future_to_info = {
                executor.submit(process_single_file_mathpix, info): info 
                for info in file_info_list
            }
            
            # Collect results khi ho√†n th√†nh
            completed_count = 0
            for future in as_completed(future_to_info):
                try:
                    index, result_text, file_path, success, error_msg = future.result()
                    
                    # L∆∞u k·∫øt qu·∫£ theo ƒë√∫ng th·ª© t·ª±
                    results[index] = {
                        'index': index,
                        'image_path': file_path,  # Keep key name for compatibility
                        'result_text': result_text,
                        'success': success,
                        'error_msg': error_msg
                    }
                    
                    completed_count += 1
                    file_type = "PDF" if file_path.endswith('.pdf') else "Image"
                    print(f"üìä Ti·∫øn ƒë·ªô: {completed_count}/{len(file_paths)} file ho√†n th√†nh ({file_type})")
                    
                except Exception as e:
                    # L·∫•y th√¥ng tin t·ª´ future_to_info n·∫øu c√≥ l·ªói
                    info = future_to_info[future]
                    index, file_path = info
                    results[index] = {
                        'index': index,
                        'image_path': file_path,
                        'result_text': None,
                        'success': False,
                        'error_msg': f"L·ªói future: {str(e)}"
                    }
                    completed_count += 1
                    print(f"‚ùå L·ªói x·ª≠ l√Ω file {file_path}: {str(e)}")
    
    except Exception as e:
        print(f"‚ùå L·ªói nghi√™m tr·ªçng trong multiprocessing: {str(e)}")
        return []
    
    end_time = time.time()
    total_time = end_time - start_time
    
    # Th·ªëng k√™ k·∫øt qu·∫£
    successful_count = sum(1 for r in results if r and r['success'])
    failed_count = len(results) - successful_count
    
    print(f"\nüìä K·∫æT QU·∫¢ T·ªîNG K·∫æT (MATHPIX):")
    print(f"‚è±Ô∏è  Th·ªùi gian x·ª≠ l√Ω: {total_time:.2f} gi√¢y")
    print(f"‚úÖ Th√†nh c√¥ng: {successful_count}/{len(file_paths)} file")
    print(f"‚ùå Th·∫•t b·∫°i: {failed_count}/{len(file_paths)} file")
    print(f"üîÑ T·ªëc ƒë·ªô trung b√¨nh: {total_time/len(file_paths):.2f} gi√¢y/file")
    
    return results

def process_multiple_images_mathpix(image_paths, max_workers=None):
    """
    Wrapper ƒë·ªÉ maintain backward compatibility
    """
    return process_multiple_files_mathpix(image_paths, max_workers)

def save_multiple_results_to_markdown(results, output_folder):
    """
    L∆∞u t·∫•t c·∫£ k·∫øt qu·∫£ OCR th√†nh m·ªôt file markdown t·ªïng h·ª£p v·ªõi template l·ªùi gi·∫£i
    """
    try:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"ocr_multiple_results_{timestamp}.md"
        output_file = os.path.join(output_folder, filename)
        
        successful_results = [r for r in results if r and r['success']]
        failed_results = [r for r in results if r and not r['success']]
        
        with open(output_file, "w", encoding="utf-8") as f:
            
            # K·∫øt qu·∫£ th√†nh c√¥ng - x·ª≠ l√Ω v√† th√™m template
            if successful_results:
                # G·ªôp t·∫•t c·∫£ n·ªôi dung OCR
                combined_content = ""
                for result in successful_results:
                    combined_content += result['result_text']
                
                # X·ª≠ l√Ω th√™m template l·ªùi gi·∫£i
                processed_content = ExamProcessor.process_exam_content(combined_content)
                f.write(processed_content)
            
            # K·∫øt qu·∫£ th·∫•t b·∫°i
            if failed_results:
                f.write("\n\n## ‚ùå K·∫øt qu·∫£ th·∫•t b·∫°i\n\n")
                for result in failed_results:
                    f.write(f"### üì∑ ·∫¢nh {result['index'] + 1}: `{os.path.basename(result['image_path'])}`\n\n")
                    f.write(f"**L·ªói:** {result['error_msg']}\n\n")
            
        print(f"‚úÖ ƒê√£ x·ª≠ l√Ω v√† th√™m template l·ªùi gi·∫£i")
        return output_file
        
    except Exception as e:
        print(f"‚ùå L·ªói khi l∆∞u file markdown t·ªïng h·ª£p: {e}")
        import traceback
        traceback.print_exc()
        return None

def save_multiple_results_to_markdown_mathpix(results, output_folder):
    """
    L∆∞u t·∫•t c·∫£ k·∫øt qu·∫£ OCR Mathpix th√†nh m·ªôt file markdown t·ªïng h·ª£p v·ªõi template l·ªùi gi·∫£i
    """
    try:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"mathpix_multiple_results_{timestamp}.md"
        output_file = os.path.join(output_folder, filename)
        
        successful_results = [r for r in results if r and r['success']]
        failed_results = [r for r in results if r and not r['success']]
        
        with open(output_file, "w", encoding="utf-8") as f:
            
            # K·∫øt qu·∫£ th√†nh c√¥ng - x·ª≠ l√Ω v√† th√™m template
            if successful_results:
                # G·ªôp t·∫•t c·∫£ n·ªôi dung OCR
                combined_content = ""
                for result in successful_results:
                    combined_content += result['result_text'] + "\n\n"
                
                # X·ª≠ l√Ω th√™m template l·ªùi gi·∫£i
                processed_content = ExamProcessor.process_exam_content(combined_content)
                f.write(processed_content)
            
            # K·∫øt qu·∫£ th·∫•t b·∫°i
            if failed_results:
                f.write("\n\n## ‚ùå K·∫øt qu·∫£ th·∫•t b·∫°i\n\n")
                for result in failed_results:
                    f.write(f"### üì∑ ·∫¢nh {result['index'] + 1}: `{os.path.basename(result['image_path'])}`\n\n")
                    f.write(f"**L·ªói:** {result['error_msg']}\n\n")
            
        print(f"‚úÖ ƒê√£ x·ª≠ l√Ω v√† th√™m template l·ªùi gi·∫£i (Mathpix)")
        return output_file
        
    except Exception as e:
        print(f"‚ùå L·ªói khi l∆∞u file markdown t·ªïng h·ª£p Mathpix: {e}")
        import traceback
        traceback.print_exc()
        return None

def save_single_result_to_markdown_mathpix(result_text, image_path, output_folder):
    """
    L∆∞u k·∫øt qu·∫£ OCR Mathpix ƒë∆°n l·∫ª th√†nh file markdown
    Args:
        result_text: n·ªôi dung OCR
        image_path: ƒë∆∞·ªùng d·∫´n ·∫£nh g·ªëc
        output_folder: th∆∞ m·ª•c output
    Returns:
        ƒë∆∞·ªùng d·∫´n file ƒë√£ l∆∞u ho·∫∑c None n·∫øu l·ªói
    """
    try:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"mathpix_result_{timestamp}.md"
        output_file = os.path.join(output_folder, filename)
        
        with open(output_file, "w", encoding="utf-8") as f:
            processed_content = ExamProcessor.process_exam_content(result_text)
            f.write(processed_content)
        
        return output_file
        
    except Exception as e:
        print(f"‚ùå L·ªói khi l∆∞u file markdown ƒë∆°n l·∫ª Mathpix: {e}")
        import traceback
        traceback.print_exc()
        return None

def get_supported_files_from_folder(folder_path):
    """L·∫•y danh s√°ch t·∫•t c·∫£ file ·∫£nh v√† PDF trong th∆∞ m·ª•c"""
    image_extensions = {'.png', '.jpg', '.jpeg', '.gif', '.webp', '.bmp', '.tiff'}
    pdf_extensions = {'.pdf'}
    supported_extensions = image_extensions | pdf_extensions
    
    supported_files = []
    
    if not os.path.exists(folder_path):
        print(f"‚ùå Th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i: {folder_path}")
        return []
    
    for filename in os.listdir(folder_path):
        ext = os.path.splitext(filename)[1].lower()
        if ext in supported_extensions:
            supported_files.append(os.path.join(folder_path, filename))
    
    supported_files.sort()  # S·∫Øp x·∫øp theo t√™n file
    return supported_files

def get_image_files_from_folder(folder_path):
    """L·∫•y danh s√°ch t·∫•t c·∫£ file ·∫£nh trong th∆∞ m·ª•c - gi·ªØ ƒë·ªÉ backward compatibility"""
    return [f for f in get_supported_files_from_folder(folder_path) 
            if os.path.splitext(f)[1].lower() != '.pdf']

def single_image_mode(image_path):
    """Test x·ª≠ l√Ω 1 ·∫£nh ƒë∆°n l·∫ª"""
    print(f"\nüîÑ CH·∫æ ƒê·ªò: X·ª≠ l√Ω ·∫£nh ƒë∆°n l·∫ª")
    print(f"üì∑ ·∫¢nh: {os.path.basename(image_path)}")
    
    result = ocr_single_image(image_path, index=None, show_result=True)

    if result:
        # √Åp d·ª•ng mapping n·∫øu user mu·ªën
        final_content = post_process_with_mapping(result, os.path.basename(image_path), "Vertex AI")
        
        output_file = save_ocr_result_to_markdown(final_content, image_path, app_config.output_folder)
        
        if output_file:
            print(f"üíæ ƒê√£ l∆∞u k·∫øt qu·∫£ v√†o: {os.path.basename(output_file)}")
    else:
        print("\n‚ùå TEST TH·∫§T B·∫†I!")

def single_file_mode_mathpix(file_path):
    """X·ª≠ l√Ω 1 file ƒë∆°n l·∫ª (·∫£nh/PDF) v·ªõi Mathpix API - Mode 2"""
    file_type = "PDF" if file_path.endswith('.pdf') else "·∫£nh"
    print(f"\nüîÑ CH·∫æ ƒê·ªò: X·ª≠ l√Ω {file_type} ƒë∆°n l·∫ª (Mathpix API)")
    print(f"ÔøΩ File: {os.path.basename(file_path)}")
    
    # G·ªçi function ph√π h·ª£p
    if file_path.endswith('.pdf'):
        result = ocr_single_pdf_mathpix(file_path, index=None, show_result=True)
    else:
        result = ocr_single_image_mathpix(file_path, index=None, show_result=True)

    if result and result[1]:  # result[1] l√† success flag
        # √Åp d·ª•ng mapping n·∫øu user mu·ªën
        final_content = post_process_with_mapping(result[0], os.path.basename(file_path), "Mathpix API")
        
        # L∆∞u k·∫øt qu·∫£ s·ª≠ d·ª•ng function m·ªõi
        output_file = save_single_result_to_markdown_mathpix(
            final_content,  # result_text ƒë√£ ƒë∆∞·ª£c mapping
            file_path,  # file_path
            app_config.output_folder
        )
        
        if output_file:
            print(f"üíæ ƒê√£ l∆∞u k·∫øt qu·∫£ v√†o: {os.path.basename(output_file)}")
        else:
            print("‚ùå L·ªói khi l∆∞u file!")
    else:
        print("\n‚ùå TEST TH·∫§T B·∫†I!")

def single_image_mode_mathpix(image_path):
    """Test x·ª≠ l√Ω 1 ·∫£nh ƒë∆°n l·∫ª v·ªõi Mathpix API - Mode 2 - Backward compatibility"""
    return single_file_mode_mathpix(image_path)

def multiple_files_mode_mathpix(file_paths, max_workers=None):
    """X·ª≠ l√Ω nhi·ªÅu file ƒë·ªìng th·ªùi v·ªõi Mathpix API - Mode 2"""
    print(f"\nüîÑ CH·∫æ ƒê·ªò: X·ª≠ l√Ω ƒëa ti·∫øn tr√¨nh (Mathpix API)")
    
    # X·ª≠ l√Ω ƒëa ti·∫øn tr√¨nh
    results = process_multiple_files_mathpix(file_paths, max_workers)
    
    if results:
        # L∆∞u k·∫øt qu·∫£ t·ªïng h·ª£p
        output_file = save_multiple_results_to_markdown_mathpix(results, app_config.output_folder)
        
        if output_file:
            print(f"üíæ ƒê√£ l∆∞u k·∫øt qu·∫£ t·ªïng h·ª£p v√†o: {os.path.basename(output_file)}")
            
    else:
        print("\n‚ùå TO√ÄN B·ªò QU√Å TR√åNH TH·∫§T B·∫†I!")

def multiple_images_mode_mathpix(image_paths, max_workers=None):
    """Test x·ª≠ l√Ω nhi·ªÅu ·∫£nh ƒë·ªìng th·ªùi v·ªõi Mathpix API - Mode 2 - Backward compatibility"""
    return multiple_files_mode_mathpix(image_paths, max_workers)

def multiple_images_mode(image_paths, max_workers=None):
    """Test x·ª≠ l√Ω nhi·ªÅu ·∫£nh ƒë·ªìng th·ªùi"""
    print(f"\nüîÑ CH·∫æ ƒê·ªò: X·ª≠ l√Ω ƒëa ti·∫øn tr√¨nh")
    
    # X·ª≠ l√Ω ƒëa ti·∫øn tr√¨nh
    results = process_multiple_images(image_paths, max_workers)
    
    if results:
        # L∆∞u k·∫øt qu·∫£ t·ªïng h·ª£p
        output_file = save_multiple_results_to_markdown(results, app_config.output_folder)
        
        if output_file:
            print(f"ƒê√£ l∆∞u k·∫øt qu·∫£ t·ªïng h·ª£p v√†o: {os.path.basename(output_file)}")
            
    else:
        print("\n‚ùå TO√ÄN B·ªò QU√Å TR√åNH TH·∫§T B·∫†I!")

def save_individual_results(results, output_folder):
    """L∆∞u t·ª´ng k·∫øt qu·∫£ th√†nh file ri√™ng l·∫ª"""
    print("\nüíæ ƒêang l∆∞u k·∫øt qu·∫£ t·ª´ng ·∫£nh ri√™ng l·∫ª...")
    
    successful_count = 0
    for result in results:
        if result and result['success']:
            try:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                image_name = os.path.splitext(os.path.basename(result['image_path']))[0]
                filename = f"ocr_{image_name}_{timestamp}.md"
                output_file = os.path.join(output_folder, filename)
                
                with open(output_file, "w", encoding="utf-8") as f:
                    f.write(result['result_text'])
                
                successful_count += 1
                
            except Exception as e:
                print(f"   ‚ùå L·ªói l∆∞u {result['image_path']}: {e}")
    
    print(f"üíæ ƒê√£ l∆∞u {successful_count} file k·∫øt qu·∫£ ri√™ng l·∫ª")

def save_ocr_result_to_markdown(result_text, image_path, output_folder):
    """L∆∞u k·∫øt qu·∫£ OCR th√†nh file markdown v·ªõi format ƒë·∫πp"""
    try:
        # T·∫°o t√™n file v·ªõi timestamp
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"ocr_result_{timestamp}.md"
        output_file = os.path.join(output_folder, filename)
        
        # Ghi n·ªôi dung v√†o file markdown
        with open(output_file, "w", encoding="utf-8") as f:
            f.write(result_text)
        return output_file
        
    except Exception as e:
        print(f"‚ùå L·ªói khi l∆∞u file markdown: {e}")
        import traceback
        traceback.print_exc()
        return None

def single_pdf_mode_vertex_ai(pdf_path):
    """X·ª≠ l√Ω 1 PDF ƒë∆°n l·∫ª v·ªõi Vertex AI"""
    print(f"\nüìÑ SINGLE PDF MODE (VERTEX AI)")
    print(f"üìÅ File: {os.path.basename(pdf_path)}")
    
    start_time = time.time()
    
    # G·ªçi OCR
    result = ocr_single_pdf_vertex_ai(pdf_path, show_result=True)
    
    end_time = time.time()
    processing_time = end_time - start_time
    
    if result[1]:  # success
        # √Åp d·ª•ng mapping n·∫øu user mu·ªën
        final_content = post_process_with_mapping(result[0], os.path.basename(pdf_path), "Vertex AI")
        
        # L∆∞u k·∫øt qu·∫£
        output_file = os.path.join(app_config.output_folder, f"{os.path.splitext(os.path.basename(pdf_path))[0]}_vertex_processed.md")
        
        try:
            os.makedirs(app_config.output_folder, exist_ok=True)
            with open(output_file, 'w', encoding='utf-8') as f:
                f.write(final_content)
            
            print(f"\n‚úÖ Ho√†n th√†nh trong {processing_time:.2f} gi√¢y")
            print(f"üíæ ƒê√£ l∆∞u: {os.path.basename(output_file)}")
            
            # H·ªèi c√≥ mu·ªën x·ª≠ l√Ω th√™m v·ªõi ExamProcessor kh√¥ng
            choice = input("\n‚ùì C√≥ mu·ªën th√™m template ƒë√°p √°n (ExamProcessor)? (y/n): ").strip().lower()
            if choice in ['y', 'yes']:
                try:
                    processed_content = ExamProcessor.process_exam_content(result[0])
                    exam_output_file = os.path.join(app_config.output_folder, f"{os.path.splitext(os.path.basename(pdf_path))[0]}_vertex_exam_processed.md")
                    
                    with open(exam_output_file, 'w', encoding='utf-8') as f:
                        f.write(processed_content)
                    
                    print(f"üìù ƒê√£ th√™m template ƒë√°p √°n: {os.path.basename(exam_output_file)}")
                except Exception as e:
                    print(f"‚ö†Ô∏è L·ªói khi th√™m template: {e}")
            
        except Exception as e:
            print(f"‚ùå L·ªói khi l∆∞u file: {e}")
    else:
        print(f"‚ùå X·ª≠ l√Ω th·∫•t b·∫°i trong {processing_time:.2f} gi√¢y")
        print(f"   L·ªói: {result[2]}")

def multiple_pdfs_mode_vertex_ai(pdf_paths, max_workers):
    """X·ª≠ l√Ω nhi·ªÅu PDF v·ªõi Vertex AI - Mode 1"""
    print(f"\nüìÑ MULTIPLE PDFs MODE (VERTEX AI)")
    print(f"üìÅ {len(pdf_paths)} PDFs")
    
    start_time = time.time()
    
    # X·ª≠ l√Ω tu·∫ßn t·ª± t·ª´ng PDF (v√¨ m·ªói PDF ƒë√£ multiprocessing internally)
    combined_results = []
    successful_count = 0
    failed_files = []
    
    for i, pdf_path in enumerate(pdf_paths):
        filename = os.path.basename(pdf_path)
        print(f"\nüìÑ [{i+1}/{len(pdf_paths)}] ƒêang x·ª≠ l√Ω: {filename}")
        
        # G·ªçi function x·ª≠ l√Ω PDF ƒë∆°n l·∫ª (c√≥ multiprocessing cho c√°c trang)
        result = ocr_single_pdf_vertex_ai(pdf_path, index=i, show_result=False)
        
        if result[1] and result[1]:  # success v√† c√≥ result_text
            successful_count += 1
            combined_results.append(f"# {filename}\n\n{result[1]}")
            
            # L∆∞u file ri√™ng l·∫ª
            individual_output = os.path.join(app_config.output_folder, f"{os.path.splitext(filename)[0]}_vertex_processed.md")
            try:
                os.makedirs(app_config.output_folder, exist_ok=True)
                with open(individual_output, 'w', encoding='utf-8') as f:
                    f.write(result[1])
                print(f"‚úÖ [File {i+1}] ƒê√£ l∆∞u: {os.path.basename(individual_output)}")
            except Exception as e:
                print(f"‚ö†Ô∏è [File {i+1}] L·ªói l∆∞u {filename}: {e}")
        else:
            error_msg = result[2] if len(result) > 2 else "Unknown error"
            failed_files.append((filename, error_msg))
            print(f"‚ùå [File {i+1}] L·ªói {filename}: {error_msg}")
    
    # L∆∞u file t·ªïng h·ª£p
    if successful_count > 0:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        combined_output_file = os.path.join(app_config.output_folder, f"vertex_multiple_pdfs_{timestamp}_processed.md")
        
        try:
            with open(combined_output_file, 'w', encoding='utf-8') as f:
                f.write("# K·∫øt qu·∫£ OCR Multiple PDFs (Vertex AI)\n\n")
                f.write(f"**Th·ªùi gian x·ª≠ l√Ω:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write(f"**Mode:** Vertex AI (Google Gemini 2.5-pro)\n")
                f.write(f"**T·ªïng files:** {len(pdf_paths)}\n")
                f.write(f"**Th√†nh c√¥ng:** {successful_count}\n")
                f.write(f"**Th·∫•t b·∫°i:** {len(failed_files)}\n\n")
                
                if failed_files:
                    f.write("## ‚ùå Files th·∫•t b·∫°i:\n\n")
                    for filename, error in failed_files:
                        f.write(f"- **{filename}**: {error}\n")
                    f.write("\n")
                
                f.write("---\n\n")
                f.write("\n\n".join(combined_results))
            
            print(f"üìã File t·ªïng h·ª£p: {os.path.basename(combined_output_file)}")
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói t·∫°o file t·ªïng h·ª£p: {e}")
    
    end_time = time.time()
    processing_time = end_time - start_time
    
    print("\n" + "="*60)
    print("üìä T·ªîNG K·∫æT BATCH OCR PDFs (VERTEX AI)")
    print("="*60)
    print(f"üìÑ T·ªïng files PDF: {len(pdf_paths)}")
    print(f"‚úÖ Th√†nh c√¥ng: {successful_count}")
    print(f"‚ùå Th·∫•t b·∫°i: {len(failed_files)}")
    print(f"‚è±Ô∏è Th·ªùi gian x·ª≠ l√Ω: {processing_time:.2f} gi√¢y")
    print(f"‚ö° T·ªëc ƒë·ªô trung b√¨nh: {processing_time/len(pdf_paths):.2f} gi√¢y/file")
    print("="*60)

def post_process_with_mapping(content, input_filename, mode_name):
    """
    X·ª≠ l√Ω n·ªôi dung sau OCR ƒë·ªÉ mapping c√¢u h·ªèi v·ªõi l·ªùi gi·∫£i
    Args:
        content: N·ªôi dung OCR ƒë√£ x·ª≠ l√Ω
        input_filename: T√™n file input g·ªëc
        mode_name: T√™n mode (ƒë·ªÉ ghi trong output)
    Returns:
        str: N·ªôi dung ƒë√£ ƒë∆∞·ª£c mapping (n·∫øu c√≥) ho·∫∑c n·ªôi dung g·ªëc
    """
    try:
        # H·ªèi user c√≥ mu·ªën th·ª±c hi·ªán mapping kh√¥ng
        print(f"\nüß© QUESTION-ANSWER MAPPING")
        print("‚îÅ" * 50)
        print("ü§ñ C√≥ th·ªÉ t·ª± ƒë·ªông mapping c√¢u h·ªèi v·ªõi l·ªùi gi·∫£i b·∫±ng AI")
        
        choice = input("‚ùì C√≥ mu·ªën th·ª±c hi·ªán mapping? (y/n): ").strip().lower()
        
        if choice != 'y':
            print("‚è≠Ô∏è B·ªè qua mapping, gi·ªØ nguy√™n n·ªôi dung OCR")
            return content
        
        print("üîÑ B·∫Øt ƒë·∫ßu mapping...")
        
        # Kh·ªüi t·∫°o mapper
        mapper = QuestionAnswerMapper()
        
        if not mapper.model:
            print("‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o AI model cho mapping")
            return content
        
        # G·ª≠i tr·ª±c ti·∫øp n·ªôi dung cho AI ƒë·ªÉ x·ª≠ l√Ω
        mapped_content = mapper.process_content_with_ai(content)
        
        if mapped_content:
            print(f"‚úÖ Mapping th√†nh c√¥ng!")
            return mapped_content
        else:
            print("‚ùå Mapping th·∫•t b·∫°i")
            return content
        
    except Exception as e:
        print(f"‚ùå L·ªói trong qu√° tr√¨nh mapping: {e}")
        print("‚è≠Ô∏è Ti·∫øp t·ª•c v·ªõi n·ªôi dung OCR g·ªëc")
        return content

def process_existing_markdown_file():
    """
    Mode 3: X·ª≠ l√Ω file .md c√≥ s·∫µn ƒë·ªÉ mapping c√¢u h·ªèi v·ªõi l·ªùi gi·∫£i
    """
    print("\n" + "="*60)
    print("üß© MODE 3: Q&A MAPPING T·ª™ FILE .MD C√ì S·∫¥N")
    print("="*60)
    print("üìù Ch·ª©c nƒÉng: Mapping c√¢u h·ªèi v·ªõi l·ªùi gi·∫£i t·ª´ file .md ƒë√£ c√≥")
    print("ü§ñ Engine: Vertex AI (Google Gemini)")
    print("="*60)
    
    # T√¨m file .md trong output folder
    output_folder = "data/output"
    md_files = []
    
    if os.path.exists(output_folder):
        for file in os.listdir(output_folder):
            if file.endswith('.md'):
                md_files.append(os.path.join(output_folder, file))
    
    if md_files:
        print(f"\nüìÅ T√¨m th·∫•y {len(md_files)} file .md trong {output_folder}:")
        for i, file_path in enumerate(md_files, 1):
            file_size = os.path.getsize(file_path) / 1024  # KB
            print(f"   {i}. {os.path.basename(file_path)} ({file_size:.1f} KB)")
        print()
    else:
        print(f"\n‚ùå Kh√¥ng t√¨m th·∫•y file .md n√†o trong {output_folder}")
        print("üí° H√£y ƒë·∫∑t file .md c·∫ßn x·ª≠ l√Ω v√†o th∆∞ m·ª•c n√†y")
        return
    
    # Cho user ch·ªçn file
    while True:
        try:
            print("üî∏ Ch·ªçn file ƒë·ªÉ x·ª≠ l√Ω mapping:")
            print("   üìù Nh·∫≠p s·ªë th·ª© t·ª± file, ho·∫∑c")
            print("   üìÇ Nh·∫≠p ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß ƒë·∫øn file .md")
            choice = input("üëâ File c·∫ßn mapping: ").strip()
            
            selected_file = None
            
            if choice.isdigit() and 1 <= int(choice) <= len(md_files):
                selected_file = md_files[int(choice) - 1]
            elif os.path.exists(choice) and choice.endswith('.md'):
                selected_file = choice
            else:
                print("‚ùå File kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng ph·∫£i .md")
                continue
            
            break
            
        except KeyboardInterrupt:
            print("\n‚ùå ƒê√£ h·ªßy.")
            return
    
    print(f"\nüìñ File ƒë∆∞·ª£c ch·ªçn: {os.path.basename(selected_file)}")
    
    # Kh·ªüi t·∫°o mapper
    mapper = QuestionAnswerMapper()
    
    if not mapper.model:
        print("‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o Vertex AI. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh.")
        return
    
    # X·ª≠ l√Ω mapping
    print(f"\nüîÑ B·∫Øt ƒë·∫ßu mapping...")
    start_time = time.time()
    
    try:
        output_file = mapper.process_single_file(selected_file)
        
        if output_file:
            processing_time = time.time() - start_time
            print(f"\n‚úÖ MAPPING TH√ÄNH C√îNG!")
            print(f"üìÅ File input: {os.path.basename(selected_file)}")
            print(f"üìÅ File output: {os.path.basename(output_file)}")
            print(f"‚è±Ô∏è Th·ªùi gian x·ª≠ l√Ω: {processing_time:.2f} gi√¢y")
            
            # H·ªèi c√≥ mu·ªën xem preview kh√¥ng
            preview = input("\n‚ùì C√≥ mu·ªën xem preview k·∫øt qu·∫£? (y/n): ").strip().lower()
            if preview == 'y':
                try:
                    with open(output_file, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    lines = content.split('\n')
                    preview_lines = lines[:30]  # Hi·ªÉn th·ªã 30 d√≤ng ƒë·∫ßu
                    
                    print("\n" + "="*60)
                    print("üìã PREVIEW K·∫æT QU·∫¢ (30 d√≤ng ƒë·∫ßu)")
                    print("="*60)
                    for line in preview_lines:
                        print(line)
                    
                    if len(lines) > 30:
                        print(f"\n... (c√≤n {len(lines) - 30} d√≤ng n·ªØa)")
                    print("="*60)
                    
                except Exception as e:
                    print(f"‚ùå L·ªói hi·ªÉn th·ªã preview: {e}")
        else:
            print("‚ùå Mapping th·∫•t b·∫°i!")
            
    except Exception as e:
        print(f"‚ùå L·ªói trong qu√° tr√¨nh mapping: {e}")
    
    print("\nüîö K·∫øt th√∫c Mode 3: Q&A Mapping t·ª´ file .md")

def main():
    # Hi·ªÉn th·ªã th√¥ng tin c·∫•u h√¨nh
    app_config.get_config_summary()
    print()
    
    # Hi·ªÉn th·ªã PDF support status
    if PDF_SUPPORT:
        print("üìÑ PDF SUPPORT: ‚úÖ C√≥ h·ªó tr·ª£ (pdf2image ƒë√£ c√†i ƒë·∫∑t)")
    else:
        print("üìÑ PDF SUPPORT: ‚ùå Kh√¥ng h·ªó tr·ª£ (c·∫ßn c√†i: pip install pdf2image)")
        print("   üí° Mode 1 ch·ªâ h·ªó tr·ª£ ·∫£nh, Mode 2 v·∫´n h·ªó tr·ª£ ƒë·∫ßy ƒë·ªß")
    print()
    
    # Cho ph√©p user ch·ªçn mode
    print("üéØ CH·ªåN MODE X·ª¨ L√ù:")
    if PDF_SUPPORT:
        print("1Ô∏è‚É£  Mode 1: Gemini OCR + Q&A Mapping (·∫¢nh + PDF)")
    else:
        print("1Ô∏è‚É£  Mode 1: Gemini OCR + Q&A Mapping (Ch·ªâ ·∫£nh)")
    print("2Ô∏è‚É£  Mode 2: Mathpix + Q&A Mapping (·∫¢nh + PDF)")
    print("3Ô∏è‚É£  Mode 3: Q&A Mapping t·ª´ file .md c√≥ s·∫µn")
    print("0Ô∏è‚É£  Tho√°t")
    
    while True:
        try:
            choice = input("\nüëâ Nh·∫≠p l·ª±a ch·ªçn (1/2/3/0): ").strip()
            
            if choice == "0":
                return
            elif choice in ["1", "2", "3"]:
                break
            else:
                print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p 1, 2, 3 ho·∫∑c 0.")
        except KeyboardInterrupt:
            return
    
    mode = int(choice)
    
    if mode == 3:
        # Mode 3: X·ª≠ l√Ω file .md c√≥ s·∫µn
        process_existing_markdown_file()
        return
    
    # L·∫•y t·∫•t c·∫£ file ·∫£nh v√† PDF trong th∆∞ m·ª•c input
    if mode == 1:
        # Mode 1 h·ªó tr·ª£ c·∫£ ·∫£nh v√† PDF (v·ªõi PDF support)
        if PDF_SUPPORT:
            file_paths = get_supported_files_from_folder(app_config.input_folder)
            file_type_name = "file (·∫£nh/PDF)"
        else:
            file_paths = get_image_files_from_folder(app_config.input_folder)
            file_type_name = "·∫£nh"
    else:
        # Mode 2 h·ªó tr·ª£ c·∫£ ·∫£nh v√† PDF
        file_paths = get_supported_files_from_folder(app_config.input_folder)
        file_type_name = "file"
    
    if not file_paths:
        print(f"üìÅ Vui l√≤ng th√™m {file_type_name} v√†o: {app_config.input_folder}")
        return
    
    # T·ª± ƒë·ªông ch·ªçn mode d·ª±a tr√™n s·ªë l∆∞·ª£ng file
    num_files = len(file_paths)
    print(f"\nÔøΩ T√¨m th·∫•y {num_files} {file_type_name} trong th∆∞ m·ª•c input:")
    for i, path in enumerate(file_paths, 1):
        file_type = "üìÑ PDF" if path.endswith('.pdf') else "üì∑ IMG"
        print(f"   {i}. {file_type} {os.path.basename(path)}")
    
    if mode == 1:
        # Mode 1: Vertex AI (·∫£nh + PDF v·ªõi pdf2image)
        print(f"\nü§ñ S·ª≠ d·ª•ng Mode 1: Vertex AI OCR")
        
        if PDF_SUPPORT:
            print("üìÑ H·ªó tr·ª£: ·∫¢nh + PDF (v·ªõi pdf2image conversion)")
        else:
            print("üìÑ H·ªó tr·ª£: Ch·ªâ ·∫£nh (c·∫ßn c√†i pdf2image ƒë·ªÉ h·ªó tr·ª£ PDF)")
        
        if num_files == 1:
            # Mode 1: X·ª≠ l√Ω 1 file ƒë∆°n l·∫ª
            file_path = file_paths[0]
            if file_path.lower().endswith('.pdf'):
                if PDF_SUPPORT:
                    single_pdf_mode_vertex_ai(file_path)
                else:
                    print("‚ùå PDF kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. C·∫ßn c√†i ƒë·∫∑t: pip install pdf2image")
            else:
                single_image_mode(file_path)
        else:
            # X·ª≠ l√Ω v·ªõi s·ªë process = s·ªë CPU ho·∫∑c s·ªë file (t√πy c√°i n√†o nh·ªè h∆°n)
            max_workers = min(num_files, mp.cpu_count())
            print(f"üöÄ S·ª≠ d·ª•ng {max_workers} processes")
            
            # Ph√¢n lo·∫°i files
            image_files = [f for f in file_paths if not f.lower().endswith('.pdf')]
            pdf_files = [f for f in file_paths if f.lower().endswith('.pdf')]
            
            if image_files:
                print(f"üì∑ X·ª≠ l√Ω {len(image_files)} ·∫£nh v·ªõi Vertex AI...")
                multiple_images_mode(image_files, max_workers)
            
            if pdf_files:
                if PDF_SUPPORT:
                    print(f"üìÑ X·ª≠ l√Ω {len(pdf_files)} PDF v·ªõi Vertex AI...")
                    multiple_pdfs_mode_vertex_ai(pdf_files, max_workers)
                else:
                    print(f"‚ùå B·ªè qua {len(pdf_files)} PDF (c·∫ßn c√†i pdf2image)")
                    
    elif mode == 2:
        # Mode 2: Mathpix (·∫£nh + PDF)
        print(f"\nüìê S·ª≠ d·ª•ng Mode 2: Mathpix API OCR")
        
        if num_files == 1:
            # Mode 2: X·ª≠ l√Ω 1 file ƒë∆°n l·∫ª
            single_file_mode_mathpix(file_paths[0])
        else:
            # X·ª≠ l√Ω v·ªõi s·ªë process = s·ªë CPU ho·∫∑c s·ªë file (t√πy c√°i n√†o nh·ªè h∆°n)
            max_workers = min(num_files, mp.cpu_count())
            print(f"üöÄ S·ª≠ d·ª•ng {max_workers} processes")
            multiple_files_mode_mathpix(file_paths, max_workers)

if __name__ == "__main__":
    main()
