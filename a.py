# --- C√ÅC IMPORT C·∫¶N THI·∫æT ---
import json
import vertexai
from vertexai.preview.generative_models import (
    GenerativeModel,
    Part,
    GenerationConfig,
    FunctionDeclaration,
    Tool
)

# Import c·∫•u h√¨nh v√† schema c·ªßa b·∫°n
from config.vertex_ai_config import vertex_ai_config
from config.response_schema import ARRAY_BASED_SCHEMA

# --- C√ÅC H√ÄM TI·ªÜN √çCH V√Ä KH·ªûI T·∫†O ---

def validate_vertex_ai_config() -> bool:
    """Ki·ªÉm tra v√† kh·ªüi t·∫°o c·∫•u h√¨nh Vertex AI."""
    if not vertex_ai_config.is_configured():
        print("L·ªói: C·∫•u h√¨nh Vertex AI kh√¥ng h·ª£p l·ªá.")
        return False
    if not vertex_ai_config.initialize_vertex_ai():
        print("L·ªói: Kh√¥ng th·ªÉ kh·ªüi t·∫°o Vertex AI.")
        return False
    return True

# --- ƒê·ªäNH NGHƒ®A C√îNG C·ª§ (TOOL) ---

def find_substring_indices(main_content: str, substring_to_find: str) -> dict:
    """T√¨m ch·ªâ s·ªë b·∫Øt ƒë·∫ßu (start) v√† k·∫øt th√∫c (end) c·ªßa m·ªôt chu·ªói con trong m·ªôt chu·ªói vƒÉn b·∫£n l·ªõn."""
    print(f"--- üîé ƒêang th·ª±c thi c√¥ng c·ª•: T√¨m chu·ªói: '{substring_to_find[:50]}...'")
    start_index = main_content.find(substring_to_find)
    if start_index == -1:
        print("    -> ‚ùå Kh√¥ng t√¨m th·∫•y.")
        return {"start": -1, "end": -1, "message": "Kh√¥ng t√¨m th·∫•y chu·ªói con."}
    else:
        end_index = start_index + len(substring_to_find)
        print(f"    -> ‚úÖ T√¨m th·∫•y t·∫°i: ({start_index}, {end_index})")
        return {"start": start_index, "end": end_index}

# --- MAIN LOGIC ---

def main():
    """H√†m ch√≠nh th·ª±c thi lu·ªìng x·ª≠ l√Ω chuy·ªÉn ƒë·ªïi Markdown sang JSON."""
    if not validate_vertex_ai_config():
        return

    # --- B∆∞·ªõc 1: Khai b√°o c√¥ng c·ª• v√† ƒë·ªçc d·ªØ li·ªáu ---
    find_indices_func_declaration = FunctionDeclaration(
        name="find_substring_indices",
        description="T√¨m ch·ªâ s·ªë b·∫Øt ƒë·∫ßu (start) v√† k·∫øt th√∫c (end) c·ªßa m·ªôt chu·ªói con (substring) trong m·ªôt chu·ªói vƒÉn b·∫£n l·ªõn (main content). S·ª≠ d·ª•ng c√¥ng c·ª• n√†y cho M·ªåI TR∆Ø·ªúNG `startIndex` v√† `endIndex` trong schema.",
        parameters={
            "type": "object",
            "properties": {
                "main_content": {"type": "string", "description": "To√†n b·ªô n·ªôi dung vƒÉn b·∫£n g·ªëc ƒë·ªÉ t√¨m ki·∫øm b√™n trong."},
                "substring_to_find": {"type": "string", "description": "ƒêo·∫°n vƒÉn b·∫£n c·ª• th·ªÉ c·∫ßn t√¨m ch·ªâ s·ªë (v√≠ d·ª•: n·ªôi dung m·ªôt c√¢u h·ªèi, n·ªôi dung m·ªôt l·ª±a ch·ªçn)."}
            },
            "required": ["main_content", "substring_to_find"]
        },
    )

    index_finder_tool = Tool(function_declarations=[find_indices_func_declaration])

    md_path = r"D:\Download\aicall\QProcess\data\output\mathpix_result_20250821_012221.md"
    try:
        with open(md_path, "r", encoding='utf-8') as f:
            content = f.read()
    except FileNotFoundError:
        print(f"L·ªói: Kh√¥ng t√¨m th·∫•y file t·∫°i ƒë∆∞·ªùng d·∫´n: {md_path}")
        return

    # --- B∆∞·ªõc 2: Kh·ªüi t·∫°o m√¥ h√¨nh v·ªõi Response Schema ---
    generation_config = GenerationConfig(
        response_mime_type="application/json",
        response_schema=ARRAY_BASED_SCHEMA,
        temperature=0.0
    )

    model = GenerativeModel(
        "gemini-2.5-flash", # V·∫´n khuy·∫øn kh√≠ch d√πng model Pro
        tools=[index_finder_tool],
        generation_config=generation_config
    )
    chat = model.start_chat()

    # --- B∆∞·ªõc 3: T·∫°o prompt v√† g·ª≠i y√™u c·∫ßu ƒë·∫ßu ti√™n ---
    prompt = f"""
    B·∫°n l√† m·ªôt chuy√™n gia tr√≠ch xu·∫•t d·ªØ li·ªáu.
    Nhi·ªám v·ª• c·ªßa b·∫°n l√† ph√¢n t√≠ch vƒÉn b·∫£n Markdown d∆∞·ªõi ƒë√¢y v√† chuy·ªÉn ƒë·ªïi n√≥ th√†nh m·ªôt c·∫•u tr√∫c JSON theo schema ƒë√£ ƒë∆∞·ª£c cung c·∫•p.

    QUY T·∫ÆC QUAN TR·ªåNG:
    1.  H√£y g·ªçi c√¥ng c·ª• `find_substring_indices` nhi·ªÅu l·∫ßn cho t·∫•t c·∫£ c√°c ph·∫ßn t·ª≠ (h·ªçc li·ªáu, c√¢u h·ªèi, l·ª±a ch·ªçn, v.v.) m√† b·∫°n c·∫ßn l·∫•y ch·ªâ s·ªë.
    2.  Sau khi ƒë√£ thu th·∫≠p ƒê·ª¶ th√¥ng tin t·ª´ c√°c c√¥ng c·ª•, b∆∞·ªõc cu·ªëi c√πng c·ªßa b·∫°n l√† tr·∫£ v·ªÅ m·ªôt ƒêO·∫†N VƒÇN B·∫¢N JSON ho√†n ch·ªânh v√† kh√¥ng g·ªçi th√™m b·∫•t k·ª≥ c√¥ng c·ª• n√†o n·ªØa.

    ƒê√¢y l√† vƒÉn b·∫£n g·ªëc:
    ```markdown
    {content}
    ```
    H√£y b·∫Øt ƒë·∫ßu qu√° tr√¨nh ph√¢n t√≠ch v√† g·ªçi c√°c c√¥ng c·ª• c·∫ßn thi·∫øt.
    """

    print("--- üöÄ B·∫Øt ƒë·∫ßu g·ª≠i y√™u c·∫ßu t·ªõi AI ---")
    response = chat.send_message(prompt)

    # --- B∆∞·ªõc 4 & 5: V√≤ng l·∫∑p x·ª≠ l√Ω cho ƒë·∫øn khi nh·∫≠n ƒë∆∞·ª£c k·∫øt qu·∫£ cu·ªëi c√πng ---
    while response.candidates[0].content.parts[0].function_call:
        api_responses = []
        function_calls = response.candidates[0].content.parts
        
        print(f"\n--- ü§ñ AI ƒë√£ ƒë·ªÅ xu·∫•t {len(function_calls)} l·∫ßn g·ªçi c√¥ng c·ª•. B·∫Øt ƒë·∫ßu th·ª±c thi... ---")

        for part in function_calls:
            if fc := part.function_call: # S·ª≠ d·ª•ng walrus operator cho g·ªçn
                if fc.name == "find_substring_indices":
                    args = fc.args
                    result = find_substring_indices(
                        main_content=args["main_content"],
                        substring_to_find=args["substring_to_find"]
                    )
                    api_responses.append(Part.from_function_response(
                        name="find_substring_indices",
                        response={"content": result}
                    ))

        if not api_responses:
            print("\n--- ‚ö†Ô∏è AI kh√¥ng y√™u c·∫ßu g·ªçi c√¥ng c·ª• h·ª£p l·ªá. D·ª´ng l·∫°i. ---")
            break

        print("\n--- üì§ ƒê√£ th·ª±c thi xong. G·ª≠i l·∫°i to√†n b·ªô k·∫øt qu·∫£ cho AI ƒë·ªÉ ti·∫øp t·ª•c x·ª≠ l√Ω... ---")
        response = chat.send_message(api_responses)
        # V√≤ng l·∫∑p s·∫Ω ki·ªÉm tra l·∫°i ƒëi·ªÅu ki·ªán ·ªü ƒë·∫ßu: AI c√≥ tr·∫£ v·ªÅ function_call n·ªØa kh√¥ng?
        # N·∫øu kh√¥ng, v√≤ng l·∫∑p k·∫øt th√∫c.

    # --- B∆∞·ªõc 6: X·ª≠ l√Ω k·∫øt qu·∫£ cu·ªëi c√πng ---
    print("\n--- ‚úÖ AI ƒë√£ tr·∫£ v·ªÅ k·∫øt qu·∫£ cu·ªëi c√πng (kh√¥ng c√≤n g·ªçi h√†m)! ---")
    try:
        # B√¢y gi·ªù, response.text s·∫Ω t·ªìn t·∫°i v√¨ AI kh√¥ng tr·∫£ v·ªÅ function_call n·ªØa
        final_json_output = json.loads(response.text)
        pretty_json = json.dumps(final_json_output, indent=2, ensure_ascii=False)
        print("\nK·∫øt qu·∫£ JSON ho√†n ch·ªânh:\n")
        print(pretty_json)
    except (AttributeError, json.JSONDecodeError) as e:
        print(f"\nL·ªói: Kh√¥ng th·ªÉ l·∫•y ho·∫∑c ph√¢n t√≠ch JSON t·ª´ ph·∫£n h·ªìi cu·ªëi c√πng. L·ªói: {e}")
        print("Ph·∫£n h·ªìi th√¥ t·ª´ AI:", response)

if __name__ == "__main__":
    main()